\section pipestatus pipestatus - array variable for pipeline exit statuses

\subsection pipestatus-synopsis Synopsis
\fish{synopsis}
pipestatus is a read-only array variable consisting of the exit status values of all
the commands that made up the most recently executed pipeline.
\endfish

\subsection pipestatus-description Description

After executing a pipeline each element of array `$pipestatus` will contain the exit status of the commands comprising the pipe. The exit status of the first command can thus be found in `$pipestatus[1]`, second in `$pipestatus[2]` and so on. The value of `count $pipestatus` will be the number of commands that made up the pipeline. The value of `$status` will be the exit status of the last command in the pipeline.

For example after executing this pipeline:
\fish
make something | grep another | tee make.log
\endfish

`count $pipestatus` will be 3, `$pipestatus[1]` will be the exit status of `make something`, `$pipestatus[2]` will be the exit status of `grep another` and `$pipestatus[3]` the exit status of `tee make.log`.
The `$status` variable will be the exit status of the last command in the pipeline, i.e. `tee make.log`.

A command without a pipeline also affects `$pipestatus`, in which case `count $pipestatus` is 1 and `$pipestatus[1]` normally has the same value as `$status` (unless the `not` or `!` operator is used, see below).

\subsection pipestatus-not Not operator

The `not` operator negates the exit status of a command, but the individual commands that comprise a pipeline does not have their statuses negated.

For example:
\fish
not make install | grep -q fail
\endfish

would have `$status` of 0 if the grep did not find "fail", however `$pipestatus[2]` would have 1.
The `$pipestatus` values are strictly those of the commands that comprise the pipeline, even if there is no pipe.

In short:
\fish
false           # $pipestatus[1] is 1, $status is 1
! false         # $pipestatus[1] is 1, $status is 0
false | true    # $pipestatus[1] is 1, $pipestatus[2] is 0, $status is 0
! false | true  # $pipestatus[1] is 1, $pipestatus[2] is 0, $status is 1 (only $status negated)
\endfish

\subsection pipestatus-blocks Blocks

When piping a block or function the exit status of the block or function is set in `$pipestatus`.

For example:
\fish
begin; false; end   | true  # $pipestatus[1] is 1, $pipestatus[2] is 0, $status is 0
begin; ! false; end | true  # $pipestatus[1] is 0, $pipestatus[2] is 0, $status is 0
\endfish

So far `$pipestatus` support in fish is the same as in bash and zsh. However when a block is used without a pipe then fish behaves like bash and not zsh (the block is removed during parsing):

\fish
begin; false; end     # $pipestatus[1] is 1, $status is 1 - similar to both bash and zsh
begin; ! false; end   # $pipestatus[1] is 1, $status is 0 - similar to bash, not zsh
\endfish

\subsection pipestatus-notes Notes

Each command affects `$pipestatus` (and `$status`) so it is best to save their transient values in another variable for further processing.

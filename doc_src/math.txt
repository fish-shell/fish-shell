\section math math - Perform mathematics calculations

\subsection math-synopsis Synopsis
\fish{synopsis}
math [-sN | --scale=N] [--] EXPRESSION
\endfish

\subsection math-description Description

`math` is used to perform mathematical calculations. It supports all the usual operations such as addition, subtraction, etc. As well as functions like `abs()`, `sqrt()` and `log2()` (see below).

Internally all calculations are performed using floating point representation. Integer values are first converted to floating point before being used. By default the final result will be rounded down to the nearest integer. The `--scale` option can be used to get floating point output.

Keep in mind that parameter expansion takes before expressions are evaluated. This can be very useful in order to perform calculations involving shell variables or the output of command substitutions, but it also means that e.g. parenthesis (`(`, `)`) and the asterisk glob character (`*`) have to be escaped or quoted. Most likely you'll want to pass the expression as one argument in single-quotes.

Multiple expression arguments are joined as if they were passed as one argument with spaces. `math` only computes one expression - to do more, call `math` more than once.

The following options are available:

- `-sN` or `--scale=N` sets the scale of the result. `N` must be an integer and defaults to zero. A scale of zero causes results to be rounded down to the nearest integer. So `3/2` returns `1` rather than `2` which `1.5` would normally round to. This is for compatibility with `bc` which was the basis for this command prior to fish 3.0.0. Scale values greater than zero causes the result to be rounded using the usual rules to the specified number of decimal places.

\subsection return-values Return Values

If the expression is successfully evaluated the return `status` is zero (success) else one.

\subsection math-syntax

`math` knows some operators, constants, functions and can (obviously) read numbers.

For numbers, `.` is always the radix character regardless of locale - `2.5`, not `2,5`. 

\subsection math-operators

`math` knows the following operators:

- `+` for addition and `-` for subtraction.

- `*` for multiplication, `/` for division.

- `^` for exponentiation.

- `%` for modulo.

- `(` and `)` for grouping.

They are all used in an infix manner - `5 + 2`, not `+ 5 2`.

\subsection math-constants

`math` knows the following constants:

- `e` - Euler's number.
- `pi` - You know that one. Half of Tau.

Use them without a leading `$`.

\subsection math-functions

`math` supports the following functions:

- `abs`
- `acos`
- `asin`
- `atan`
- `atan2`
- `ceil`
- `cos`
- `cosh`
- `exp` - the base-e exponential function
- `fac` - factorial
- `floor`
- `ln`
- `log` or `log10` - the base-10 logarithm
- `ncr` - the "from n things, choose r" combinatorics function
- `npr` - ncr * r!
- `pow(x,y)` returns x to the y (and can be written as `x ^ y`)
- `sin`
- `sinh`
- `sqrt`
- `tan`
- `tanh`

All of the trigonometric functions use radians.

\subsection math-example Examples

`math 1+1` outputs 2.

`math $status - 128` outputs the numerical exit status of the last command minus 128.

`math 10 / 6` outputs `1`.

`math -s0 10.0 / 6.0` outputs `1`.

`math -s3 10 / 6` outputs `1.666`.

`math "sin(pi)"` outputs `0`.

`math -s 1 '2.5 % 1'` outputs `0.5`.

\subsection math-notes Compatibility notes

Fish 1.x and 2.x releases relied on the `bc` command for handling `math` expressions. Starting with fish 3.0.0 fish uses the tinyexpr library and evaluates the expression without the involvement of any external commands.

You don't need to use `--` before the expression even if it begins with a minus sign which might otherwise be interpreted as an invalid option. If you do insert `--` before the expression it will cause option scanning to stop just like for every other command and it won't be part of the expression.

Note that the modulo operator (`x % y`) is not well defined for floating point arithmetic. In `math`, the result is that of subtracting "y" until the remainder is smaller than y, which means `10.5 % 6.1` results in 4.4.

# vim: set filetype=fish:

# Regression test for issue #3129. In previous versions these statements would
# cause an `assert()` to fire thus killing the shell.
complete -c pkill -o ''
complete -c pkill -l ''
complete -c pkill -s ''

# Test that conditions that add or remove completions don't deadlock, etc.
# We actually encountered some case that was effectively like this (Issue 2 in github)

complete --command AAAA -l abcd --condition 'complete -c AAAA -l efgh'
echo "AAAA:"
complete -C'AAAA -' | sort
echo "AAAA:"
complete -C'AAAA -' | sort

complete --command BBBB -l abcd --condition 'complete -e --command BBBB -l abcd'
echo "BBBB:"
complete -C'BBBB -'
echo "BBBB:"
complete -C'BBBB -'

# Test that erasing completions works correctly
echo

function sort
    # GNU sort is really stupid, a non-C locale seems to make it assume --dictionary-order
    # If I wanted --dictionary-order, I would have specified --dictionary-order!
    env LC_ALL=C sort $argv
end

complete -c CCCC -l bar
complete -c CCCC -l baz
complete -c CCCC -o bar
complete -c CCCC -o foo
complete -c CCCC -s a
complete -c CCCC -s b
echo "CCCC:"
complete -C'CCCC -' | sort
complete -c CCCC -l bar -e
echo "CCCC:"
complete -C'CCCC -' | sort
complete -c CCCC -o foo -e
echo "CCCC:"
complete -C'CCCC -' | sort
complete -c CCCC -s a -e
echo "CCCC:"
complete -C'CCCC -' | sort
complete -c CCCC -e
echo "CCCC:"
complete -C'CCCC -' | sort

echo "Test that -- suppresses option completions"
complete -c TestDoubleDash -l TestDoubleDashOption
complete -C'TestDoubleDash -' | sort
echo "Expect no output:" (complete -C'TestDoubleDash -- -' | sort)

# fish seems to have always handled "exclusive" options strangely
# It seems to treat them the same as "old-style" (single-dash) long options
echo "Testing exclusive options"
complete -c TestExclusive -x -s Q
complete -c TestExclusive -x -s W
complete -c TestExclusive -s A
echo "Expect -A -Q -W:" (complete -C'TestExclusive -' | sort | string join ' ')
echo "Expect -AQ -AW:" (complete -C'TestExclusive -A' | sort | string join ' ')
echo "Expect no output 1:" (complete -C'TestExclusive -Q')
echo "Expect no output 2:" (complete -C'TestExclusive -W')

# Test for optional arguments, like cp's --backup
complete -c TestOptionalArgument -l backup -f -a 'none all simple'
echo "Expect --backup --backup=:" (complete -C'TestOptionalArgument -' | sort | string join ' ')
echo "Expect --backup=all  --backup=none  --backup=simple:" (complete -C'TestOptionalArgument --backup=' | sort | string join ' ')

# Test that directory completions work correctly
if begin; rm -rf test6.tmp.dir; and mkdir test6.tmp.dir; end
    pushd test6.tmp.dir
    set -l dir (mktemp -d XXXXXXXX)
    if complete -C$dir | grep "^$dir/.*Directory" >/dev/null
        echo "implicit cd complete works"
    else
        echo "no implicit cd complete"
    end
    if complete -C"command $dir" | grep "^$dir/.*Directory" >/dev/null
        echo "implicit cd complete incorrect after 'command'"
    else
        echo "no implicit cd complete after 'command'"
    end
    popd
    if begin
            set -l PATH $PWD/test6.tmp.dir $PATH 2>/dev/null
            complete -C$dir | grep "^$dir/.*Directory" >/dev/null
        end
        echo "PATH causes dir completion"
    else
        echo "PATH does not cause dir completion"
    end
    rm -rf test6.tmp.dir
else
    echo "error: could not create temp environment" >&2
end

# Test command expansion with parened PATHs (#952)
begin
  set -l parened_path $PWD/'test6.tmp2.(paren).dir'
  if not begin
        rm -rf $parened_path
        and mkdir $parened_path
        and mkdir $parened_path/subdir
        and mkdir $parened_path/subdir/subdir
        and ln -s /bin/ls $parened_path/'__test6_(paren)_command'
        and ln -s /bin/ls $parened_path/subdir/'__test6_subdir_(paren)_command'
        and ln -s /bin/echo $parened_path/subdir/executable
        and ln -s /bin/ls $parened_path/subdir/subdir/executable
      end
    echo "error: could not create command expansion temp environment" >&2
  end

  # Verify that we can expand commands when PATH has parens
  set -l PATH $parened_path $PATH
  begin
    set -l completed (complete -C__test6_ | cut -f 1 -d \t)
    set -l expected '__test6_(paren)_command'
    if test "$completed" = "$expected"
      echo "Command completion with parened PATHs test passed"
    else
      echo "Command completion with parened PATHs test failed." \
           "Expected '$expected', got '$completed'" >&2
    end
  end

  # Verify that commands with intermediate slashes expand with respect to PATH
  begin
    set -l completed (complete -Csubdir/__test6_subdir | cut -f 1 -d \t)
    set -l expected 'subdir/__test6_subdir_(paren)_command'
    if test "$completed" = "$expected"
      echo "Command completion with intermediate slashes test passed"
    else
      echo "Command completion with intermediate slashes test failed:" \
           "expected '$expected', got '$completed'" >&2
    end
  end

  # Verify that commands with intermediate dot-dot do NOT expand with respect to PATH
  # Note that in real world subdir may be a simlink
  begin
    set -l completed (complete -Csubdir/../subdir/__test6_subdir | \
                      cut -f 1 -d \t | cut -f 1,4 -d /)
    set -l expected (complete -Csubdir/__test6_subdir | cut -f 1 -d \t)
    if test "$completed" = "$expected"
      echo "Command completion with intermediate dot-dot test passed"
    else
      echo "Command completion with intermediate dot-dot test failed:" \
           "expected '$expected', got '$completed'" >&2
    end
  end

  # Verify that commands with dot-dot suffix expand with respect to PATH
  begin
    set -l completed (complete -Csubdir/subdir/.. | cut -f 1 -d \t)
    set -l expected "subdir/subdir/../"
    if test "$completed" = "$expected"
      echo "Command completion with dot-dot suffix test passed"
    else
      echo "Command completion with dot-dot suffix test failed:" \
           "expected '$expected', got '$completed'" >&2
    end
  end

  # Verify that relative path is used instead of searching in PATH
  # subdir/executable -> /bin/echo
  # subdir/subdir/executable -> /bin/echo
  begin
    set -l PATH $parened_path/subdir
    pushd $parened_path

    set -l wanted subdir/executable
    set -l found (command -s $wanted)
    if test $found = $wanted
      and test (subdir/executable "passed") = "passed"
      echo "Relative path instead of searching in PATH test passed"
    else
      echo "Executable from PATH was used, test failed:" \
           "wanted '$wanted', instead found '$found'" >&2
    end
    popd
  end

  rm -rf $parened_path
end

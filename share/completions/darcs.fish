
# magic completion safety check (do not remove this comment)
if not type -q darcs
    exit
end

#
# Completions for the darcs command
# This file was autogenerated by the file make_vcs_completions.fish
# which is shipped with the fish source code.
#

#
# Completions from commandline
#

complete -c darcs -n "not __fish_use_subcommand" -a "(test -f _darcs/prefs/repos; and cat _darcs/prefs/repos)" -d "Darcs repo"
complete -c darcs -a "test predist boringfile binariesfile" -n "contains setpref (commandline -poc)" -d "Set the specified option" -x

#
# subcommands
#

complete -c darcs -n '__fish_use_subcommand' -x -a help -d 'Display help about darcs and darcs commands'
complete -c darcs -n '__fish_use_subcommand' -x -a add -d 'Add one or more new files or directories'
complete -c darcs -n '__fish_use_subcommand' -x -a remove -d 'Remove files from version control'
complete -c darcs -n '__fish_use_subcommand' -x -a move -d 'Move or rename files'
complete -c darcs -n '__fish_use_subcommand' -x -a replace -d 'Substitute one word for another'
complete -c darcs -n '__fish_use_subcommand' -x -a revert -d 'Discard unrecorded changes'
complete -c darcs -n '__fish_use_subcommand' -x -a unrevert -d 'Undo the last revert (may fail if changes after the revert)'
complete -c darcs -n '__fish_use_subcommand' -x -a whatsnew -d 'List unrecorded changes in the working tree'
complete -c darcs -n '__fish_use_subcommand' -x -a record -d 'Create a patch from unrecorded changes'
complete -c darcs -n '__fish_use_subcommand' -x -a unrecord -d 'Remove recorded patches without changing the working copy'
complete -c darcs -n '__fish_use_subcommand' -x -a amend-record -d 'Improve a patch before it leaves your repository'
complete -c darcs -n '__fish_use_subcommand' -x -a mark-conflicts -d 'Mark unresolved conflicts in working tree, for manual resolution'
complete -c darcs -n '__fish_use_subcommand' -x -a tag -d 'Name the current repository state for future reference'
complete -c darcs -n '__fish_use_subcommand' -x -a setpref -d 'Set a preference (test, predist, boringfile or binariesfile)'
complete -c darcs -n '__fish_use_subcommand' -x -a diff -d 'Create a diff between two versions of the repository'
complete -c darcs -n '__fish_use_subcommand' -x -a changes -d 'List patches in the repository'
complete -c darcs -n '__fish_use_subcommand' -x -a annotate -d 'Display which patch last modified something'
complete -c darcs -n '__fish_use_subcommand' -x -a dist -d 'Create a distribution tarball'
complete -c darcs -n '__fish_use_subcommand' -x -a trackdown -d 'Locate the most recent version lacking an error'
complete -c darcs -n '__fish_use_subcommand' -x -a show -d 'Show information which is stored by darcs'
complete -c darcs -n '__fish_use_subcommand' -x -a pull -d 'Copy and apply patches from another repository to this one'
complete -c darcs -n '__fish_use_subcommand' -x -a obliterate -d 'Delete selected patches from the repository. (UNSAFE!)'
complete -c darcs -n '__fish_use_subcommand' -x -a rollback -d 'Record a new patch reversing some recorded changes'
complete -c darcs -n '__fish_use_subcommand' -x -a push -d 'Copy and apply patches from this repository to another one'
complete -c darcs -n '__fish_use_subcommand' -x -a send -d 'Send by email a bundle of one or more patches'
complete -c darcs -n '__fish_use_subcommand' -x -a apply -d 'Apply a patch bundle created by `darcs send\''
complete -c darcs -n '__fish_use_subcommand' -x -a get -d 'Create a local copy of a repository'
complete -c darcs -n '__fish_use_subcommand' -x -a put -d 'Makes a copy of the repository'
complete -c darcs -n '__fish_use_subcommand' -x -a initialize -d 'Make the current directory a repository'
complete -c darcs -n '__fish_use_subcommand' -x -a optimize -d 'Optimize the repository'
complete -c darcs -n '__fish_use_subcommand' -x -a check -d 'Check the repository for consistency'
complete -c darcs -n '__fish_use_subcommand' -x -a repair -d 'Repair a corrupted repository'
complete -c darcs -n '__fish_use_subcommand' -x -a convert -d 'Convert a repository from a legacy format'


#
# Completions for the 'help' subcommand
#

complete -c darcs -n 'contains \'help\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'help\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'help\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'help\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'help\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'help\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'help\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'help\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'help\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'help\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'help\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'help\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'help\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'help\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'help\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'help\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'help\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'


#
# Completions for the 'add' subcommand
#

complete -c darcs -n 'contains \'add\' (commandline -poc)' -l boring -d 'Don\'t skip boring files'
complete -c darcs -n 'contains \'add\' (commandline -poc)' -l no-boring -d 'Skip borign files [DEFAULT]'
complete -c darcs -n 'contains \'add\' (commandline -poc)' -l case-ok -d 'Don\'t refuse to add files differing only in case'
complete -c darcs -n 'contains \'add\' (commandline -poc)' -l no-case-ok -d 'Refuse to add files whose name differ only in case [DEFAULT]'
complete -c darcs -n 'contains \'add\' (commandline -poc)' -l reserved-ok -d 'Don\'t refuse to add files with Windows-reserved names'
complete -c darcs -n 'contains \'add\' (commandline -poc)' -l no-reserved-ok -d 'Refuse to add files with Windows-reserved names [DEFAULT]'
complete -c darcs -n 'contains \'add\' (commandline -poc)' -s r -l recursive -d 'Add contents of subdirectories'
complete -c darcs -n 'contains \'add\' (commandline -poc)' -l date-trick -d 'Add files with date appended to avoid conflict [EXPERIMENTAL]'
complete -c darcs -n 'contains \'add\' (commandline -poc)' -l no-date-trick -d 'Don\'t use experimental date appending trick [DEFAULT]'
complete -c darcs -n 'contains \'add\' (commandline -poc)' -l repodir -x -a '(__fish_complete_directories (commandline -ct))' -d 'Specify the repository directory in which to run'
complete -c darcs -n 'contains \'add\' (commandline -poc)' -l dry-run -d 'Don\'t actually take the action'
complete -c darcs -n 'contains \'add\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'add\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'add\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'add\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'add\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'add\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'add\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'add\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'add\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'add\' (commandline -poc)' -l umask -x -d 'Specify umask to use when writing'
complete -c darcs -n 'contains \'add\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'add\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'add\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'add\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'add\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'add\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'add\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'add\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'


#
# Completions for the 'remove' subcommand
#

complete -c darcs -n 'contains \'remove\' (commandline -poc)' -l repodir -x -a '(__fish_complete_directories (commandline -ct))' -d 'Specify the repository directory in which to run'
complete -c darcs -n 'contains \'remove\' (commandline -poc)' -s r -l recursive -d 'Recurse into subdirectories'
complete -c darcs -n 'contains \'remove\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'remove\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'remove\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'remove\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'remove\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'remove\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'remove\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'remove\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'remove\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'remove\' (commandline -poc)' -l umask -x -d 'Specify umask to use when writing'
complete -c darcs -n 'contains \'remove\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'remove\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'remove\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'remove\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'remove\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'remove\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'remove\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'remove\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'


#
# Completions for the 'move' subcommand
#

complete -c darcs -n 'contains \'move\' (commandline -poc)' -l case-ok -d 'Don\'t refuse to add files differing only in case'
complete -c darcs -n 'contains \'move\' (commandline -poc)' -l no-case-ok -d 'Refuse to add files whose name differ only in case [DEFAULT]'
complete -c darcs -n 'contains \'move\' (commandline -poc)' -l reserved-ok -d 'Don\'t refuse to add files with Windows-reserved names'
complete -c darcs -n 'contains \'move\' (commandline -poc)' -l no-reserved-ok -d 'Refuse to add files with Windows-reserved names [DEFAULT]'
complete -c darcs -n 'contains \'move\' (commandline -poc)' -l repodir -x -a '(__fish_complete_directories (commandline -ct))' -d 'Specify the repository directory in which to run'
complete -c darcs -n 'contains \'move\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'move\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'move\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'move\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'move\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'move\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'move\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'move\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'move\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'move\' (commandline -poc)' -l umask -x -d 'Specify umask to use when writing'
complete -c darcs -n 'contains \'move\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'move\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'move\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'move\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'move\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'move\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'move\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'move\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'


#
# Completions for the 'replace' subcommand
#

complete -c darcs -n 'contains \'replace\' (commandline -poc)' -l token-chars -x -d 'Define token to contain these characters'
complete -c darcs -n 'contains \'replace\' (commandline -poc)' -s f -l force -d 'Proceed with replace even if \'new\' token already exists'
complete -c darcs -n 'contains \'replace\' (commandline -poc)' -l no-force -d 'Don\'t force the replace if it looks scary'
complete -c darcs -n 'contains \'replace\' (commandline -poc)' -l repodir -x -a '(__fish_complete_directories (commandline -ct))' -d 'Specify the repository directory in which to run'
complete -c darcs -n 'contains \'replace\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'replace\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'replace\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'replace\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'replace\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'replace\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'replace\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'replace\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'replace\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'replace\' (commandline -poc)' -l ignore-times -d 'Don\'t trust the file modification times'
complete -c darcs -n 'contains \'replace\' (commandline -poc)' -l no-ignore-times -d 'Trust modification times to find modified files [DEFAULT]'
complete -c darcs -n 'contains \'replace\' (commandline -poc)' -l umask -x -d 'Specify umask to use when writing'
complete -c darcs -n 'contains \'replace\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'replace\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'replace\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'replace\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'replace\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'replace\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'replace\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'replace\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'


#
# Completions for the 'revert' subcommand
#

complete -c darcs -n 'contains \'revert\' (commandline -poc)' -s a -l all -d 'Answer yes to all patches'
complete -c darcs -n 'contains \'revert\' (commandline -poc)' -s i -l interactive -d 'Prompt user interactively'
complete -c darcs -n 'contains \'revert\' (commandline -poc)' -l repodir -x -a '(__fish_complete_directories (commandline -ct))' -d 'Specify the repository directory in which to run'
complete -c darcs -n 'contains \'revert\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'revert\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'revert\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'revert\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'revert\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'revert\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'revert\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'revert\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'revert\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'revert\' (commandline -poc)' -l ignore-times -d 'Don\'t trust the file modification times'
complete -c darcs -n 'contains \'revert\' (commandline -poc)' -l no-ignore-times -d 'Trust modification times to find modified files [DEFAULT]'
complete -c darcs -n 'contains \'revert\' (commandline -poc)' -l umask -x -d 'Specify umask to use when writing'
complete -c darcs -n 'contains \'revert\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'revert\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'revert\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'revert\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'revert\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'revert\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'revert\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'revert\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'


#
# Completions for the 'unrevert' subcommand
#

complete -c darcs -n 'contains \'unrevert\' (commandline -poc)' -l ignore-times -d 'Don\'t trust the file modification times'
complete -c darcs -n 'contains \'unrevert\' (commandline -poc)' -l no-ignore-times -d 'Trust modification times to find modified files [DEFAULT]'
complete -c darcs -n 'contains \'unrevert\' (commandline -poc)' -s a -l all -d 'Answer yes to all patches'
complete -c darcs -n 'contains \'unrevert\' (commandline -poc)' -s i -l interactive -d 'Prompt user interactively'
complete -c darcs -n 'contains \'unrevert\' (commandline -poc)' -l repodir -x -a '(__fish_complete_directories (commandline -ct))' -d 'Specify the repository directory in which to run'
complete -c darcs -n 'contains \'unrevert\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'unrevert\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'unrevert\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'unrevert\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'unrevert\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'unrevert\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'unrevert\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'unrevert\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'unrevert\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'unrevert\' (commandline -poc)' -l umask -x -d 'Specify umask to use when writing'
complete -c darcs -n 'contains \'unrevert\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'unrevert\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'unrevert\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'unrevert\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'unrevert\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'unrevert\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'unrevert\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'unrevert\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'


#
# Completions for the 'whatsnew' subcommand
#

complete -c darcs -n 'contains \'whatsnew\' (commandline -poc)' -s s -l summary -d 'Summarize changes'
complete -c darcs -n 'contains \'whatsnew\' (commandline -poc)' -l no-summary -d 'Don\'t summarize changes'
complete -c darcs -n 'contains \'whatsnew\' (commandline -poc)' -s u -l unified -d 'Output patch in a darcs-specific format similar to diff -u'
complete -c darcs -n 'contains \'whatsnew\' (commandline -poc)' -l no-unified -d 'Output patch in darcs\' usual format'
complete -c darcs -n 'contains \'whatsnew\' (commandline -poc)' -s l -l look-for-adds -d 'Look for (non-boring) files that could be added'
complete -c darcs -n 'contains \'whatsnew\' (commandline -poc)' -l repodir -x -a '(__fish_complete_directories (commandline -ct))' -d 'Specify the repository directory in which to run'
complete -c darcs -n 'contains \'whatsnew\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'whatsnew\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'whatsnew\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'whatsnew\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'whatsnew\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'whatsnew\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'whatsnew\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'whatsnew\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'whatsnew\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'whatsnew\' (commandline -poc)' -l ignore-times -d 'Don\'t trust the file modification times'
complete -c darcs -n 'contains \'whatsnew\' (commandline -poc)' -l no-ignore-times -d 'Trust modification times to find modified files [DEFAULT]'
complete -c darcs -n 'contains \'whatsnew\' (commandline -poc)' -l boring -d 'Don\'t skip boring files'
complete -c darcs -n 'contains \'whatsnew\' (commandline -poc)' -l no-boring -d 'Skip borign files [DEFAULT]'
complete -c darcs -n 'contains \'whatsnew\' (commandline -poc)' -l no-cache -d 'Don\'t use patch caches'
complete -c darcs -n 'contains \'whatsnew\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'whatsnew\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'whatsnew\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'whatsnew\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'whatsnew\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'whatsnew\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'whatsnew\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'whatsnew\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'


#
# Completions for the 'record' subcommand
#

complete -c darcs -n 'contains \'record\' (commandline -poc)' -s m -l patch-name -x -d 'Name of patch'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -s A -l author -x -d 'Specify author id'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l no-test -d 'Don\'t run the test script'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l test -d 'Run the test script'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l leave-test-directory -d 'Don\'t remove the test directory'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l remove-test-directory -d 'Remove the test directory'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -s a -l all -d 'Answer yes to all patches'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l pipe -d 'Ask user interactively for the patch metadata'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -s i -l interactive -d 'Prompt user interactively'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l ask-deps -d 'Ask for extra dependencies'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l no-ask-deps -d 'Don\'t ask for extra dependencies'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l edit-long-comment -d 'Edit the long comment by default'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l skip-long-comment -d 'Don\'t give a long comment'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l prompt-long-comment -d 'Prompt for whether to edit the long comment'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -s l -l look-for-adds -d 'Look for (non-boring) files that could be added'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l repodir -x -a '(__fish_complete_directories (commandline -ct))' -d 'Specify the repository directory in which to run'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l logfile -r -d 'Give patch name and comment in file'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l delete-logfile -d 'Delete the logfile when done'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l no-delete-logfile -d 'Keep the logfile when done [DEFAULT]'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l compress -d 'Create compressed patches'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l ignore-times -d 'Don\'t trust the file modification times'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l no-ignore-times -d 'Trust modification times to find modified files [DEFAULT]'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l umask -x -d 'Specify umask to use when writing'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l set-scripts-executable -d 'Make scripts executable'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'record\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'


#
# Completions for the 'unrecord' subcommand
#

complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -l from-match -x -d 'Select changes starting with a patch matching PATTERN'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -l from-patch -x -d 'Select changes starting with a patch matching REGEXP'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -l from-tag -x -d 'Select changes starting with a tag matching REGEXP'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -l last -x -d 'Select the last NUMBER patches'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -l matches -x -d 'Select patches matching PATTERN'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -s p -l patches -x -d 'Select patches matching REGEXP'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -s t -l tags -x -d 'Select tags matching REGEXP'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -l no-deps -d 'Don\'t automatically fulfill dependencies'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -l dont-prompt-for-dependencies -d 'Don\'t ask about patches that are depended on by matched patches (with --match or --patch)'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -l prompt-for-dependencies -d 'Prompt about patches that are depended on by matched patches [DEFAULT]'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -s a -l all -d 'Answer yes to all patches'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -s i -l interactive -d 'Prompt user interactively'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -l repodir -x -a '(__fish_complete_directories (commandline -ct))' -d 'Specify the repository directory in which to run'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -l compress -d 'Create compressed patches'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -l umask -x -d 'Specify umask to use when writing'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'unrecord\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'


#
# Completions for the 'amend-record' subcommand
#

complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -l match -x -d 'Select a single patch matching PATTERN'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -s p -l patch -x -d 'Select a single patch matching REGEXP'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -s n -l index -x -d 'Select one patch'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -l no-test -d 'Don\'t run the test script'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -l test -d 'Run the test script'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -l leave-test-directory -d 'Don\'t remove the test directory'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -l remove-test-directory -d 'Remove the test directory'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -s a -l all -d 'Answer yes to all patches'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -s i -l interactive -d 'Prompt user interactively'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -s A -l author -x -d 'Specify author id'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -s m -l patch-name -x -d 'Name of patch'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -l edit-long-comment -d 'Edit the long comment by default'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -l skip-long-comment -d 'Don\'t give a long comment'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -l prompt-long-comment -d 'Prompt for whether to edit the long comment'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -s l -l look-for-adds -d 'Look for (non-boring) files that could be added'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -l repodir -x -a '(__fish_complete_directories (commandline -ct))' -d 'Specify the repository directory in which to run'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -l compress -d 'Create compressed patches'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -l ignore-times -d 'Don\'t trust the file modification times'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -l no-ignore-times -d 'Trust modification times to find modified files [DEFAULT]'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -l umask -x -d 'Specify umask to use when writing'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -l set-scripts-executable -d 'Make scripts executable'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'amend-record\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'


#
# Completions for the 'mark-conflicts' subcommand
#

complete -c darcs -n 'contains \'mark-conflicts\' (commandline -poc)' -l ignore-times -d 'Don\'t trust the file modification times'
complete -c darcs -n 'contains \'mark-conflicts\' (commandline -poc)' -l no-ignore-times -d 'Trust modification times to find modified files [DEFAULT]'
complete -c darcs -n 'contains \'mark-conflicts\' (commandline -poc)' -l repodir -x -a '(__fish_complete_directories (commandline -ct))' -d 'Specify the repository directory in which to run'
complete -c darcs -n 'contains \'mark-conflicts\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'mark-conflicts\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'mark-conflicts\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'mark-conflicts\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'mark-conflicts\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'mark-conflicts\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'mark-conflicts\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'mark-conflicts\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'mark-conflicts\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'mark-conflicts\' (commandline -poc)' -l umask -x -d 'Specify umask to use when writing'
complete -c darcs -n 'contains \'mark-conflicts\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'mark-conflicts\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'mark-conflicts\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'mark-conflicts\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'mark-conflicts\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'mark-conflicts\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'mark-conflicts\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'mark-conflicts\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'


#
# Completions for the 'tag' subcommand
#

complete -c darcs -n 'contains \'tag\' (commandline -poc)' -s m -l patch-name -x -d 'Name of patch'
complete -c darcs -n 'contains \'tag\' (commandline -poc)' -s A -l author -x -d 'Specify author id'
complete -c darcs -n 'contains \'tag\' (commandline -poc)' -l pipe -d 'Ask user interactively for the patch metadata'
complete -c darcs -n 'contains \'tag\' (commandline -poc)' -s i -l interactive -d 'Prompt user interactively'
complete -c darcs -n 'contains \'tag\' (commandline -poc)' -l edit-long-comment -d 'Edit the long comment by default'
complete -c darcs -n 'contains \'tag\' (commandline -poc)' -l skip-long-comment -d 'Don\'t give a long comment'
complete -c darcs -n 'contains \'tag\' (commandline -poc)' -l prompt-long-comment -d 'Prompt for whether to edit the long comment'
complete -c darcs -n 'contains \'tag\' (commandline -poc)' -l repodir -x -a '(__fish_complete_directories (commandline -ct))' -d 'Specify the repository directory in which to run'
complete -c darcs -n 'contains \'tag\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'tag\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'tag\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'tag\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'tag\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'tag\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'tag\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'tag\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'tag\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'tag\' (commandline -poc)' -l compress -d 'Create compressed patches'
complete -c darcs -n 'contains \'tag\' (commandline -poc)' -l umask -x -d 'Specify umask to use when writing'
complete -c darcs -n 'contains \'tag\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'tag\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'tag\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'tag\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'tag\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'tag\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'tag\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'tag\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'


#
# Completions for the 'setpref' subcommand
#

complete -c darcs -n 'contains \'setpref\' (commandline -poc)' -l repodir -x -a '(__fish_complete_directories (commandline -ct))' -d 'Specify the repository directory in which to run'
complete -c darcs -n 'contains \'setpref\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'setpref\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'setpref\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'setpref\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'setpref\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'setpref\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'setpref\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'setpref\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'setpref\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'setpref\' (commandline -poc)' -l umask -x -d 'Specify umask to use when writing'
complete -c darcs -n 'contains \'setpref\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'setpref\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'setpref\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'setpref\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'setpref\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'setpref\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'setpref\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'setpref\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'
complete -c darcs -n 'contains \'setpref\' (commandline -poc)' -x -d 'Shell command that runs regression tests'
complete -c darcs -n 'contains \'setpref\' (commandline -poc)' -x -d 'Shell command to run before `darcs dist\''
complete -c darcs -n 'contains \'setpref\' (commandline -poc)' -x -d 'Path to a version-controlled boring file'
complete -c darcs -n 'contains \'setpref\' (commandline -poc)' -x -d 'Path to a version-controlled binaries file'


#
# Completions for the 'diff' subcommand
#

complete -c darcs -n 'contains \'diff\' (commandline -poc)' -l to-match -x -d 'Select changes up to a patch matching PATTERN'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -l to-patch -x -d 'Select changes up to a patch matching REGEXP'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -l to-tag -x -d 'Select changes up to a tag matching REGEXP'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -l from-match -x -d 'Select changes starting with a patch matching PATTERN'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -l from-patch -x -d 'Select changes starting with a patch matching REGEXP'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -l from-tag -x -d 'Select changes starting with a tag matching REGEXP'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -l match -x -d 'Select a single patch matching PATTERN'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -s p -l patch -x -d 'Select a single patch matching REGEXP'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -l last -x -d 'Select the last NUMBER patches'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -s n -l index -x -d 'Select a range of patches'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -l diff-command -x -a '(__fish_complete_command)' -d 'Specify diff command (ignores --diff-opts)'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -l diff-opts -x -d 'Options to pass to diff'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -s u -l unified -d 'Pass -u option to diff'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -l no-unified -d 'Output patch in diff\'s dumb format'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -l repodir -x -a '(__fish_complete_directories (commandline -ct))' -d 'Specify the repository directory in which to run'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -l store-in-memory -d 'Do patch application in memory rather than on disk'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -l no-store-in-memory -d 'Do patch application on disk [DEFAULT]'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'diff\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'


#
# Completions for the 'changes' subcommand
#

complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l to-match -x -d 'Select changes up to a patch matching PATTERN'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l to-patch -x -d 'Select changes up to a patch matching REGEXP'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l to-tag -x -d 'Select changes up to a tag matching REGEXP'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l from-match -x -d 'Select changes starting with a patch matching PATTERN'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l from-patch -x -d 'Select changes starting with a patch matching REGEXP'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l from-tag -x -d 'Select changes starting with a tag matching REGEXP'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l last -x -d 'Select the last NUMBER patches'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -s n -l index -x -d 'Select a range of patches'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l matches -x -d 'Select patches matching PATTERN'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -s p -l patches -x -d 'Select patches matching REGEXP'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -s t -l tags -x -d 'Select tags matching REGEXP'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l max-count -x -d 'Return only NUMBER results'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l only-to-files -d 'Show only changes to specified files'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l no-only-to-files -d 'Show changes to all files [DEFAULT]'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l context -d 'Give output suitable for get --context'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l xml-output -d 'Generate XML formatted output'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l human-readable -d 'Give human-readable output'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l number -d 'Number the changes'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l count -d 'Output count of changes'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -s s -l summary -d 'Summarize changes'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l no-summary -d 'Don\'t summarize changes'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l reverse -d 'Show changes in reverse order'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l no-reverse -d 'Show changes in the usual order [DEFAULT]'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l repo -x -d 'Specify the repository URL'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l repodir -x -a '(__fish_complete_directories (commandline -ct))' -d 'Specify the repository directory in which to run'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -s a -l all -d 'Answer yes to all patches'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -s i -l interactive -d 'Prompt user interactively'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l ssh-cm -d 'Use SSH ControlMaster feature'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l no-ssh-cm -d 'Don\'t use SSH ControlMaster feature [DEFAULT]'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l http-pipelining -d 'Enable HTTP pipelining [DEFAULT]'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l no-http-pipelining -d 'Disable HTTP pipelining'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l no-cache -d 'Don\'t use patch caches'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l remote-darcs -x -a '(__fish_complete_command)' -d 'Name of the darcs executable on the remote server'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'changes\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'


#
# Completions for the 'annotate' subcommand
#

complete -c darcs -n 'contains \'annotate\' (commandline -poc)' -s s -l summary -d 'Summarize changes'
complete -c darcs -n 'contains \'annotate\' (commandline -poc)' -l no-summary -d 'Don\'t summarize changes'
complete -c darcs -n 'contains \'annotate\' (commandline -poc)' -s u -l unified -d 'Output patch in a darcs-specific format similar to diff -u'
complete -c darcs -n 'contains \'annotate\' (commandline -poc)' -l no-unified -d 'Output patch in darcs\' usual format'
complete -c darcs -n 'contains \'annotate\' (commandline -poc)' -l human-readable -d 'Give human-readable output'
complete -c darcs -n 'contains \'annotate\' (commandline -poc)' -l xml-output -d 'Generate XML formatted output'
complete -c darcs -n 'contains \'annotate\' (commandline -poc)' -l match -x -d 'Select a single patch matching PATTERN'
complete -c darcs -n 'contains \'annotate\' (commandline -poc)' -s p -l patch -x -d 'Select a single patch matching REGEXP'
complete -c darcs -n 'contains \'annotate\' (commandline -poc)' -s t -l tag -x -d 'Select tag matching REGEXP'
complete -c darcs -n 'contains \'annotate\' (commandline -poc)' -s n -l index -x -d 'Select one patch'
complete -c darcs -n 'contains \'annotate\' (commandline -poc)' -l creator-hash -x -d 'Specify hash of creator patch (see docs)'
complete -c darcs -n 'contains \'annotate\' (commandline -poc)' -l repodir -x -a '(__fish_complete_directories (commandline -ct))' -d 'Specify the repository directory in which to run'
complete -c darcs -n 'contains \'annotate\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'annotate\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'annotate\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'annotate\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'annotate\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'annotate\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'annotate\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'annotate\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'annotate\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'annotate\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'annotate\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'annotate\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'annotate\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'annotate\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'annotate\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'annotate\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'annotate\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'


#
# Completions for the 'dist' subcommand
#

complete -c darcs -n 'contains \'dist\' (commandline -poc)' -s d -l dist-name -x -d 'Name of version'
complete -c darcs -n 'contains \'dist\' (commandline -poc)' -l repodir -x -a '(__fish_complete_directories (commandline -ct))' -d 'Specify the repository directory in which to run'
complete -c darcs -n 'contains \'dist\' (commandline -poc)' -l match -x -d 'Select a single patch matching PATTERN'
complete -c darcs -n 'contains \'dist\' (commandline -poc)' -s p -l patch -x -d 'Select a single patch matching REGEXP'
complete -c darcs -n 'contains \'dist\' (commandline -poc)' -s t -l tag -x -d 'Select tag matching REGEXP'
complete -c darcs -n 'contains \'dist\' (commandline -poc)' -s n -l index -x -d 'Select one patch'
complete -c darcs -n 'contains \'dist\' (commandline -poc)' -l store-in-memory -d 'Do patch application in memory rather than on disk'
complete -c darcs -n 'contains \'dist\' (commandline -poc)' -l no-store-in-memory -d 'Do patch application on disk [DEFAULT]'
complete -c darcs -n 'contains \'dist\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'dist\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'dist\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'dist\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'dist\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'dist\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'dist\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'dist\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'dist\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'dist\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'dist\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'dist\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'dist\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'dist\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'dist\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'dist\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'dist\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'


#
# Completions for the 'trackdown' subcommand
#

complete -c darcs -n 'contains \'trackdown\' (commandline -poc)' -l repodir -x -a '(__fish_complete_directories (commandline -ct))' -d 'Specify the repository directory in which to run'
complete -c darcs -n 'contains \'trackdown\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'trackdown\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'trackdown\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'trackdown\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'trackdown\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'trackdown\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'trackdown\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'trackdown\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'trackdown\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'trackdown\' (commandline -poc)' -l set-scripts-executable -d 'Make scripts executable'
complete -c darcs -n 'contains \'trackdown\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'trackdown\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'trackdown\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'trackdown\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'trackdown\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'trackdown\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'trackdown\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'trackdown\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'


#
# Completions for the 'show' subcommand
#

complete -c darcs -n 'contains \'show\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'


#
# Completions for the 'pull' subcommand
#

complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l matches -x -d 'Select patches matching PATTERN'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -s p -l patches -x -d 'Select patches matching REGEXP'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -s t -l tags -x -d 'Select tags matching REGEXP'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -s a -l all -d 'Answer yes to all patches'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -s i -l interactive -d 'Prompt user interactively'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l mark-conflicts -d 'Mark conflicts [DEFAULT]'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l allow-conflicts -d 'Allow conflicts, but don\'t mark them'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l skip-conflicts -d 'Filter out any patches that would create conflicts'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l external-merge -x -a '(__fish_complete_command)' -d 'Use external tool to merge conflicts'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l test -d 'Run the test script'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l no-test -d 'Don\'t run the test script'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l dry-run -d 'Don\'t actually take the action'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l xml-output -d 'Generate XML formatted output'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -s s -l summary -d 'Summarize changes'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l no-summary -d 'Don\'t summarize changes'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l no-deps -d 'Don\'t automatically fulfill dependencies'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l dont-prompt-for-dependencies -d 'Don\'t ask about patches that are depended on by matched patches (with --match or --patch)'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l prompt-for-dependencies -d 'Prompt about patches that are depended on by matched patches [DEFAULT]'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l set-default -d 'Set default repository [DEFAULT]'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l no-set-default -d 'Don\'t set default repository'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l repodir -x -a '(__fish_complete_directories (commandline -ct))' -d 'Specify the repository directory in which to run'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l ignore-unrelated-repos -d 'Do not check if repositories are unrelated'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l intersection -d 'Take intersection of all repositories'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l union -d 'Take union of all repositories [DEFAULT]'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l complement -d 'Take complement of repositories (in order listed)'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l compress -d 'Create compressed patches'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l nolinks -d 'Do not link repository or pristine to sibling'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l ignore-times -d 'Don\'t trust the file modification times'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l no-ignore-times -d 'Trust modification times to find modified files [DEFAULT]'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l remote-repo -x -d 'Specify the remote repository URL to work with'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l set-scripts-executable -d 'Make scripts executable'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l umask -x -d 'Specify umask to use when writing'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l restrict-paths -d 'Don\'t allow darcs to touch external files or repo metadata'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l ssh-cm -d 'Use SSH ControlMaster feature'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l no-ssh-cm -d 'Don\'t use SSH ControlMaster feature [DEFAULT]'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l http-pipelining -d 'Enable HTTP pipelining [DEFAULT]'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l no-http-pipelining -d 'Disable HTTP pipelining'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l no-cache -d 'Don\'t use patch caches'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l remote-darcs -x -a '(__fish_complete_command)' -d 'Name of the darcs executable on the remote server'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'pull\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'


#
# Completions for the 'obliterate' subcommand
#

complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -l from-match -x -d 'Select changes starting with a patch matching PATTERN'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -l from-patch -x -d 'Select changes starting with a patch matching REGEXP'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -l from-tag -x -d 'Select changes starting with a tag matching REGEXP'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -l last -x -d 'Select the last NUMBER patches'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -l matches -x -d 'Select patches matching PATTERN'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -s p -l patches -x -d 'Select patches matching REGEXP'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -s t -l tags -x -d 'Select tags matching REGEXP'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -l no-deps -d 'Don\'t automatically fulfill dependencies'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -l dont-prompt-for-dependencies -d 'Don\'t ask about patches that are depended on by matched patches (with --match or --patch)'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -l prompt-for-dependencies -d 'Prompt about patches that are depended on by matched patches [DEFAULT]'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -s a -l all -d 'Answer yes to all patches'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -s i -l interactive -d 'Prompt user interactively'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -l repodir -x -a '(__fish_complete_directories (commandline -ct))' -d 'Specify the repository directory in which to run'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -s s -l summary -d 'Summarize changes'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -l no-summary -d 'Don\'t summarize changes'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -l dry-run -d 'Don\'t actually take the action'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -l xml-output -d 'Generate XML formatted output'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -l compress -d 'Create compressed patches'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -l ignore-times -d 'Don\'t trust the file modification times'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -l no-ignore-times -d 'Trust modification times to find modified files [DEFAULT]'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -l umask -x -d 'Specify umask to use when writing'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'obliterate\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'


#
# Completions for the 'rollback' subcommand
#

complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -l from-match -x -d 'Select changes starting with a patch matching PATTERN'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -l from-patch -x -d 'Select changes starting with a patch matching REGEXP'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -l from-tag -x -d 'Select changes starting with a tag matching REGEXP'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -l last -x -d 'Select the last NUMBER patches'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -l matches -x -d 'Select patches matching PATTERN'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -s p -l patches -x -d 'Select patches matching REGEXP'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -s t -l tags -x -d 'Select tags matching REGEXP'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -s a -l all -d 'Answer yes to all patches'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -s i -l interactive -d 'Prompt user interactively'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -s A -l author -x -d 'Specify author id'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -s m -l patch-name -x -d 'Name of patch'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -l edit-long-comment -d 'Edit the long comment by default'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -l skip-long-comment -d 'Don\'t give a long comment'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -l prompt-long-comment -d 'Prompt for whether to edit the long comment'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -l no-test -d 'Don\'t run the test script'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -l test -d 'Run the test script'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -l leave-test-directory -d 'Don\'t remove the test directory'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -l remove-test-directory -d 'Remove the test directory'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -l repodir -x -a '(__fish_complete_directories (commandline -ct))' -d 'Specify the repository directory in which to run'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -l compress -d 'Create compressed patches'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -l umask -x -d 'Specify umask to use when writing'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'rollback\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'


#
# Completions for the 'push' subcommand
#

complete -c darcs -n 'contains \'push\' (commandline -poc)' -l matches -x -d 'Select patches matching PATTERN'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -s p -l patches -x -d 'Select patches matching REGEXP'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -s t -l tags -x -d 'Select tags matching REGEXP'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l no-deps -d 'Don\'t automatically fulfill dependencies'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l dont-prompt-for-dependencies -d 'Don\'t ask about patches that are depended on by matched patches (with --match or --patch)'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l prompt-for-dependencies -d 'Prompt about patches that are depended on by matched patches [DEFAULT]'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -s a -l all -d 'Answer yes to all patches'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -s i -l interactive -d 'Prompt user interactively'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l sign -d 'Sign the patch with your gpg key'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l sign-as -x -d 'Sign the patch with a given keyid'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l sign-ssl -x -d 'Sign the patch using openssl with a given private key'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l dry-run -d 'Don\'t actually take the action'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l xml-output -d 'Generate XML formatted output'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -s s -l summary -d 'Summarize changes'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l no-summary -d 'Don\'t summarize changes'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l repodir -x -a '(__fish_complete_directories (commandline -ct))' -d 'Specify the repository directory in which to run'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l set-default -d 'Set default repository [DEFAULT]'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l no-set-default -d 'Don\'t set default repository'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l ignore-unrelated-repos -d 'Do not check if repositories are unrelated'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l apply-as -x -a '(__fish_complete_users)' -d 'Apply patch as another user using sudo'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l no-apply-as -d 'Don\'t use sudo to apply as another user [DEFAULT]'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l nolinks -d 'Do not link repository or pristine to sibling'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l remote-repo -x -d 'Specify the remote repository URL to work with'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l ssh-cm -d 'Use SSH ControlMaster feature'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l no-ssh-cm -d 'Don\'t use SSH ControlMaster feature [DEFAULT]'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l http-pipelining -d 'Enable HTTP pipelining [DEFAULT]'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l no-http-pipelining -d 'Disable HTTP pipelining'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l no-cache -d 'Don\'t use patch caches'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l remote-darcs -x -a '(__fish_complete_command)' -d 'Name of the darcs executable on the remote server'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'push\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'


#
# Completions for the 'send' subcommand
#

complete -c darcs -n 'contains \'send\' (commandline -poc)' -l matches -x -d 'Select patches matching PATTERN'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -s p -l patches -x -d 'Select patches matching REGEXP'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -s t -l tags -x -d 'Select tags matching REGEXP'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l no-deps -d 'Don\'t automatically fulfill dependencies'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l dont-prompt-for-dependencies -d 'Don\'t ask about patches that are depended on by matched patches (with --match or --patch)'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l prompt-for-dependencies -d 'Prompt about patches that are depended on by matched patches [DEFAULT]'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -s a -l all -d 'Answer yes to all patches'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -s i -l interactive -d 'Prompt user interactively'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l from -x -d 'Specify email address'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -s A -l author -x -d 'Specify author id'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l to -x -d 'Specify destination email'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l cc -x -d 'Mail results to additional EMAIL(s)'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l subject -x -d 'Specify mail subject'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l in-reply-to -x -d 'Specify in-reply-to header'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -s o -l output -r -d 'Specify output filename'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l sign -d 'Sign the patch with your gpg key'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l sign-as -x -d 'Sign the patch with a given keyid'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l sign-ssl -x -d 'Sign the patch using openssl with a given private key'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l dry-run -d 'Don\'t actually take the action'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l xml-output -d 'Generate XML formatted output'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -s s -l summary -d 'Summarize changes'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l no-summary -d 'Don\'t summarize changes'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l edit-description -d 'Edit the patch bundle description'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l set-default -d 'Set default repository [DEFAULT]'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l no-set-default -d 'Don\'t set default repository'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l repodir -x -a '(__fish_complete_directories (commandline -ct))' -d 'Specify the repository directory in which to run'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l sendmail-command -x -a '(__fish_complete_command)' -d 'Specify sendmail command'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l ignore-unrelated-repos -d 'Do not check if repositories are unrelated'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l logfile -r -d 'Give patch name and comment in file'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l delete-logfile -d 'Delete the logfile when done'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l no-delete-logfile -d 'Keep the logfile when done [DEFAULT]'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l remote-repo -x -d 'Specify the remote repository URL to work with'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l context -r -d 'Send to context stored in FILENAME'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l ssh-cm -d 'Use SSH ControlMaster feature'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l no-ssh-cm -d 'Don\'t use SSH ControlMaster feature [DEFAULT]'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l http-pipelining -d 'Enable HTTP pipelining [DEFAULT]'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l no-http-pipelining -d 'Disable HTTP pipelining'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l no-cache -d 'Don\'t use patch caches'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l remote-darcs -x -a '(__fish_complete_command)' -d 'Name of the darcs executable on the remote server'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'send\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'


#
# Completions for the 'apply' subcommand
#

complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l verify -x -d 'Verify that the patch was signed by a key in PUBRING'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l verify-ssl -x -d 'Verify using openSSL with authorized keys from file KEYS'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l no-verify -d 'Don\'t verify patch signature'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -s a -l all -d 'Answer yes to all patches'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -s i -l interactive -d 'Prompt user interactively'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l dry-run -d 'Don\'t actually take the action'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l xml-output -d 'Generate XML formatted output'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l mark-conflicts -d 'Mark conflicts'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l allow-conflicts -d 'Allow conflicts, but don\'t mark them'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l no-resolve-conflicts -d 'Equivalent to --dont-allow-conflicts, for backwards compatibility'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l skip-conflicts -d 'Filter out any patches that would create conflicts'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l external-merge -x -a '(__fish_complete_command)' -d 'Use external tool to merge conflicts'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l no-test -d 'Don\'t run the test script'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l test -d 'Run the test script'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l leave-test-directory -d 'Don\'t remove the test directory'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l remove-test-directory -d 'Remove the test directory'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l repodir -x -a '(__fish_complete_directories (commandline -ct))' -d 'Specify the repository directory in which to run'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l reply -x -d 'Reply to email-based patch using FROM address'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l cc -x -d 'Mail results to additional EMAIL(s). Requires --reply'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l happy-forwarding -d 'Forward unsigned messages without extra header'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l no-happy-forwarding -d 'Don\'t forward unsigned messages without extra header [DEFAULT]'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l sendmail-command -x -a '(__fish_complete_command)' -d 'Specify sendmail command'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l ignore-times -d 'Don\'t trust the file modification times'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l no-ignore-times -d 'Trust modification times to find modified files [DEFAULT]'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l compress -d 'Create compressed patches'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l set-scripts-executable -d 'Make scripts executable'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l umask -x -d 'Specify umask to use when writing'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l restrict-paths -d 'Don\'t allow darcs to touch external files or repo metadata'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'apply\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'


#
# Completions for the 'get' subcommand
#

complete -c darcs -n 'contains \'get\' (commandline -poc)' -l repo-name -x -d '--repodir=DIRECTORY'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l partial -d 'Get partial repository using checkpoint (old-fashioned format only)'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l lazy -d 'Get patch files only as needed'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l ephemeral -d 'Don\'t save patch files in the repository'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l complete -d 'Get a complete copy of the repository'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l to-match -x -d 'Select changes up to a patch matching PATTERN'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l to-patch -x -d 'Select changes up to a patch matching REGEXP'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -s t -l tag -x -d 'Select tag matching REGEXP'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l context -r -d 'Version specified by the context in FILENAME'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l set-default -d 'Set default repository [DEFAULT]'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l no-set-default -d 'Don\'t set default repository'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l set-scripts-executable -d 'Make scripts executable'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l nolinks -d 'Do not link repository or pristine to sibling'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l hashed -d 'Convert darcs-1 format to hashed format'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l old-fashioned-inventory -d 'Convert from hashed to darcs-1 format'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l ssh-cm -d 'Use SSH ControlMaster feature'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l no-ssh-cm -d 'Don\'t use SSH ControlMaster feature [DEFAULT]'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l http-pipelining -d 'Enable HTTP pipelining [DEFAULT]'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l no-http-pipelining -d 'Disable HTTP pipelining'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l no-cache -d 'Don\'t use patch caches'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l remote-darcs -x -a '(__fish_complete_command)' -d 'Name of the darcs executable on the remote server'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'get\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'


#
# Completions for the 'put' subcommand
#

complete -c darcs -n 'contains \'put\' (commandline -poc)' -l to-match -x -d 'Select changes up to a patch matching PATTERN'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -l to-patch -x -d 'Select changes up to a patch matching REGEXP'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -s t -l tag -x -d 'Select tag matching REGEXP'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -l context -r -d 'Version specified by the context in FILENAME'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -l set-scripts-executable -d 'Make scripts executable'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -l hashed -d 'Convert darcs-1 format to hashed format'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -l old-fashioned-inventory -d 'Convert from hashed to darcs-1 format'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -l set-default -d 'Set default repository [DEFAULT]'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -l no-set-default -d 'Don\'t set default repository'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -l repodir -x -a '(__fish_complete_directories (commandline -ct))' -d 'Specify the repository directory in which to run'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -l apply-as -x -a '(__fish_complete_users)' -d 'Apply patch as another user using sudo'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -l no-apply-as -d 'Don\'t use sudo to apply as another user [DEFAULT]'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -l ssh-cm -d 'Use SSH ControlMaster feature'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -l no-ssh-cm -d 'Don\'t use SSH ControlMaster feature [DEFAULT]'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -l http-pipelining -d 'Enable HTTP pipelining [DEFAULT]'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -l no-http-pipelining -d 'Disable HTTP pipelining'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -l no-cache -d 'Don\'t use patch caches'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -l remote-darcs -x -a '(__fish_complete_command)' -d 'Name of the darcs executable on the remote server'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'put\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'


#
# Completions for the 'initialize' subcommand
#

complete -c darcs -n 'contains \'initialize\' (commandline -poc)' -l hashed -d 'Some new features. Compatible with older repos'
complete -c darcs -n 'contains \'initialize\' (commandline -poc)' -l darcs-2 -d 'All features. Related repos must use same format [DEFAULT]'
complete -c darcs -n 'contains \'initialize\' (commandline -poc)' -l old-fashioned-inventory -d 'Minimal features. What older repos use'
complete -c darcs -n 'contains \'initialize\' (commandline -poc)' -l repodir -x -a '(__fish_complete_directories (commandline -ct))' -d 'Specify the repository directory in which to run'
complete -c darcs -n 'contains \'initialize\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'initialize\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'initialize\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'initialize\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'initialize\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'initialize\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'initialize\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'initialize\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'initialize\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'initialize\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'initialize\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'initialize\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'initialize\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'initialize\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'initialize\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'initialize\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'initialize\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'


#
# Completions for the 'optimize' subcommand
#

complete -c darcs -n 'contains \'optimize\' (commandline -poc)' -l repodir -x -a '(__fish_complete_directories (commandline -ct))' -d 'Specify the repository directory in which to run'
complete -c darcs -n 'contains \'optimize\' (commandline -poc)' -l reorder-patches -d 'Reorder the patches in the repository'
complete -c darcs -n 'contains \'optimize\' (commandline -poc)' -l sibling -x -d 'Specify a sibling directory'
complete -c darcs -n 'contains \'optimize\' (commandline -poc)' -l relink -d 'Relink random internal data to a sibling'
complete -c darcs -n 'contains \'optimize\' (commandline -poc)' -l relink-pristine -d 'Relink pristine tree (not recommended)'
complete -c darcs -n 'contains \'optimize\' (commandline -poc)' -l upgrade -d 'Upgrade repository to latest compatible format'
complete -c darcs -n 'contains \'optimize\' (commandline -poc)' -l pristine -d 'Optimize hashed pristine layout'
complete -c darcs -n 'contains \'optimize\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'optimize\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'optimize\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'optimize\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'optimize\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'optimize\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'optimize\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'optimize\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'optimize\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'optimize\' (commandline -poc)' -l compress -d 'Create compressed patches'
complete -c darcs -n 'contains \'optimize\' (commandline -poc)' -l uncompress -d 'Uncompress patches'
complete -c darcs -n 'contains \'optimize\' (commandline -poc)' -l umask -x -d 'Specify umask to use when writing'
complete -c darcs -n 'contains \'optimize\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'optimize\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'optimize\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'optimize\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'optimize\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'optimize\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'optimize\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'optimize\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'


#
# Completions for the 'check' subcommand
#

complete -c darcs -n 'contains \'check\' (commandline -poc)' -l complete -d 'Get a complete copy of the repository'
complete -c darcs -n 'contains \'check\' (commandline -poc)' -l partial -d 'Get partial repository using checkpoint (old-fashioned format only)'
complete -c darcs -n 'contains \'check\' (commandline -poc)' -l no-test -d 'Don\'t run the test script'
complete -c darcs -n 'contains \'check\' (commandline -poc)' -l test -d 'Run the test script'
complete -c darcs -n 'contains \'check\' (commandline -poc)' -l leave-test-directory -d 'Don\'t remove the test directory'
complete -c darcs -n 'contains \'check\' (commandline -poc)' -l remove-test-directory -d 'Remove the test directory'
complete -c darcs -n 'contains \'check\' (commandline -poc)' -l repodir -x -a '(__fish_complete_directories (commandline -ct))' -d 'Specify the repository directory in which to run'
complete -c darcs -n 'contains \'check\' (commandline -poc)' -l ignore-times -d 'Don\'t trust the file modification times'
complete -c darcs -n 'contains \'check\' (commandline -poc)' -l no-ignore-times -d 'Trust modification times to find modified files [DEFAULT]'
complete -c darcs -n 'contains \'check\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'check\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'check\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'check\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'check\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'check\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'check\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'check\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'check\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'check\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'check\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'check\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'check\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'check\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'check\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'check\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'check\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'


#
# Completions for the 'repair' subcommand
#

complete -c darcs -n 'contains \'repair\' (commandline -poc)' -l repodir -x -a '(__fish_complete_directories (commandline -ct))' -d 'Specify the repository directory in which to run'
complete -c darcs -n 'contains \'repair\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'repair\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'repair\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'repair\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'repair\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'repair\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'repair\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'repair\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'repair\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'repair\' (commandline -poc)' -l umask -x -d 'Specify umask to use when writing'
complete -c darcs -n 'contains \'repair\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'repair\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'repair\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'repair\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'repair\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'repair\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'repair\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'repair\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'


#
# Completions for the 'convert' subcommand
#

complete -c darcs -n 'contains \'convert\' (commandline -poc)' -l repo-name -x -d '--repodir=DIRECTORY'
complete -c darcs -n 'contains \'convert\' (commandline -poc)' -l set-scripts-executable -d 'Make scripts executable'
complete -c darcs -n 'contains \'convert\' (commandline -poc)' -l disable -d 'Disable this command'
complete -c darcs -n 'contains \'convert\' (commandline -poc)' -s h -l help -d 'Shows brief description of command and its arguments'
complete -c darcs -n 'contains \'convert\' (commandline -poc)' -l debug -d 'Give only debug output'
complete -c darcs -n 'contains \'convert\' (commandline -poc)' -l debug-verbose -d 'Give debug and verbose output'
complete -c darcs -n 'contains \'convert\' (commandline -poc)' -l debug-http -d 'Give debug output for libcurl'
complete -c darcs -n 'contains \'convert\' (commandline -poc)' -s v -l verbose -d 'Give verbose output'
complete -c darcs -n 'contains \'convert\' (commandline -poc)' -s q -l quiet -d 'Suppress informational output'
complete -c darcs -n 'contains \'convert\' (commandline -poc)' -l standard-verbosity -d 'Neither verbose nor quiet output'
complete -c darcs -n 'contains \'convert\' (commandline -poc)' -l timings -d 'Provide debugging timings information'
complete -c darcs -n 'contains \'convert\' (commandline -poc)' -l ssh-cm -d 'Use SSH ControlMaster feature'
complete -c darcs -n 'contains \'convert\' (commandline -poc)' -l no-ssh-cm -d 'Don\'t use SSH ControlMaster feature [DEFAULT]'
complete -c darcs -n 'contains \'convert\' (commandline -poc)' -l http-pipelining -d 'Enable HTTP pipelining [DEFAULT]'
complete -c darcs -n 'contains \'convert\' (commandline -poc)' -l no-http-pipelining -d 'Disable HTTP pipelining'
complete -c darcs -n 'contains \'convert\' (commandline -poc)' -l no-cache -d 'Don\'t use patch caches'
complete -c darcs -n 'contains \'convert\' (commandline -poc)' -l remote-darcs -x -a '(__fish_complete_command)' -d 'Name of the darcs executable on the remote server'
complete -c darcs -n 'contains \'convert\' (commandline -poc)' -l posthook -x -a '(__fish_complete_command)' -d 'Specify command to run after this darcs command'
complete -c darcs -n 'contains \'convert\' (commandline -poc)' -l no-posthook -d 'Don\'t run posthook command'
complete -c darcs -n 'contains \'convert\' (commandline -poc)' -l prompt-posthook -d 'Prompt before running posthook [DEFAULT]'
complete -c darcs -n 'contains \'convert\' (commandline -poc)' -l run-posthook -d 'Run posthook command without prompting'
complete -c darcs -n 'contains \'convert\' (commandline -poc)' -l prehook -x -a '(__fish_complete_command)' -d 'Specify command to run before this darcs command'
complete -c darcs -n 'contains \'convert\' (commandline -poc)' -l no-prehook -d 'Don\'t run prehook command'
complete -c darcs -n 'contains \'convert\' (commandline -poc)' -l prompt-prehook -d 'Prompt before running prehook [DEFAULT]'
complete -c darcs -n 'contains \'convert\' (commandline -poc)' -l run-prehook -d 'Run prehook command without prompting'




set -l subcommands checkpoint config container image network node plugin secret service swarm system trust volume attach build commit cp create deploy diff events exec export history images import info inspect kill load login logout logs pause port ps pull push rename restart rm rmi run save search start stats stop tag top unpause update version wait stack
complete -f -c docker -n "__fish_use_subcommand $subcommands " -l config -d 'string Location of client config files (default "/Users/kevinkonrad/.docker")'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -s D -l debug -d 'Enable debug mode'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -s H -l host -d 'Daemon socket(s) to connect to'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -s l -l log-level -d 'Set the logging level ("debug"|"info"|"warn"|"error"|"fatal") (default "info")'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -l tls -d 'Use TLS; implied by --tlsverify'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -l tlscacert -d 'string Trust certs signed only by this CA (default "/Users/kevinkonrad/.docker/ca.pem")'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -l tlscert -d 'string Path to TLS certificate file (default "/Users/kevinkonrad/.docker/cert.pem")'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -l tlskey -d 'string Path to TLS key file (default "/Users/kevinkonrad/.docker/key.pem")'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -l tlsverify -d 'Use TLS and verify the remote'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -s v -l version -d 'Print version information and quit'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a checkpoint -d 'Manage checkpoints'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a config -d 'Manage Docker configs'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a container -d 'Manage containers'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a image -d 'Manage images'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a network -d 'Manage networks'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a node -d 'Manage Swarm nodes'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a plugin -d 'Manage plugins'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a secret -d 'Manage Docker secrets'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a service -d 'Manage services'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a swarm -d 'Manage Swarm'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a system -d 'Manage Docker'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a trust -d 'Manage trust on Docker images'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a volume -d 'Manage volumes'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a attach -d 'Attach local standard input, output, and error streams to a running container'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a build -d 'Build an image from a Dockerfile'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a commit -d 'Create a new image from a container\'s changes'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a cp -d 'Copy files/folders between a container and the local filesystem'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a create -d 'Create a new container'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a deploy -d 'Deploy a new stack or update an existing stack'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a diff -d 'Inspect changes to files or directories on a container\'s filesystem'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a events -d 'Get real time events from the server'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a exec -d 'Run a command in a running container'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a export -d 'Export a container\'s filesystem as a tar archive'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a history -d 'Show the history of an image'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a images -d 'List images'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a import -d 'Import the contents from a tarball to create a filesystem image'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a info -d 'Display system-wide information'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a inspect -d 'Return low-level information on Docker objects'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a kill -d 'Kill one or more running containers'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a load -d 'Load an image from a tar archive or STDIN'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a login -d 'Log in to a Docker registry'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a logout -d 'Log out from a Docker registry'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a logs -d 'Fetch the logs of a container'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a pause -d 'Pause all processes within one or more containers'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a port -d 'List port mappings or a specific mapping for the container'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a ps -d 'List containers'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a pull -d 'Pull an image or a repository from a registry'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a push -d 'Push an image or a repository to a registry'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a rename -d 'Rename a container'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a restart -d 'Restart one or more containers'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a rm -d 'Remove one or more containers'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a rmi -d 'Remove one or more images'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a run -d 'Run a command in a new container'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a save -d 'Save one or more images to a tar archive (streamed to STDOUT by default)'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a search -d 'Search the Docker Hub for images'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a start -d 'Start one or more stopped containers'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a stats -d 'Display a live stream of container(s) resource usage statistics'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a stop -d 'Stop one or more running containers'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a tag -d 'Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a top -d 'Display the running processes of a container'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a unpause -d 'Unpause all processes within one or more containers'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a update -d 'Update configuration of one or more containers'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a version -d 'Show the Docker version information'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a wait -d 'Block until one or more containers stop, then print their exit codes'
complete -f -c docker -n "__fish_use_subcommand $subcommands " -a stack -d 'Manage Docker stacks'
set -l checkpoint_subcommands create ls rm
complete -f -c docker -n "__fish_seen_subcommand_from checkpoint ;and not __fish_seen_subcommand_from $checkpoint_subcommands " -a create -d 'Create a checkpoint from a running container'
complete -f -c docker -n "__fish_seen_subcommand_from checkpoint ;and not __fish_seen_subcommand_from $checkpoint_subcommands " -a ls -d 'List checkpoints for a container'
complete -f -c docker -n "__fish_seen_subcommand_from checkpoint ;and not __fish_seen_subcommand_from $checkpoint_subcommands " -a rm -d 'Remove a checkpoint'
complete -f -c docker -n "__fish_seen_subcommand_from checkpoint ;and __fish_seen_subcommand_from create " -l checkpoint-dir -d 'string Use a custom checkpoint storage directory'
complete -f -c docker -n "__fish_seen_subcommand_from checkpoint ;and __fish_seen_subcommand_from create " -l leave-running -d 'Leave the container running after checkpoint'
complete -f -c docker -n "__fish_seen_subcommand_from checkpoint ;and __fish_seen_subcommand_from ls " -l checkpoint-dir -d 'string Use a custom checkpoint storage directory'
complete -f -c docker -n "__fish_seen_subcommand_from checkpoint ;and __fish_seen_subcommand_from rm " -l checkpoint-dir -d 'string Use a custom checkpoint storage directory'
set -l config_subcommands create inspect ls rm
complete -f -c docker -n "__fish_seen_subcommand_from config ;and not __fish_seen_subcommand_from $config_subcommands " -a create -d 'Create a config from a file or STDIN'
complete -f -c docker -n "__fish_seen_subcommand_from config ;and not __fish_seen_subcommand_from $config_subcommands " -a inspect -d 'Display detailed information on one or more configs'
complete -f -c docker -n "__fish_seen_subcommand_from config ;and not __fish_seen_subcommand_from $config_subcommands " -a ls -d 'List configs'
complete -f -c docker -n "__fish_seen_subcommand_from config ;and not __fish_seen_subcommand_from $config_subcommands " -a rm -d 'Remove one or more configs'
complete -f -c docker -n "__fish_seen_subcommand_from config ;and __fish_seen_subcommand_from create " -s l -l label -d 'Config labels'
complete -f -c docker -n "__fish_seen_subcommand_from config ;and __fish_seen_subcommand_from create " -l template-driver -d 'string Template driver'
complete -f -c docker -n "__fish_seen_subcommand_from config ;and __fish_seen_subcommand_from inspect " -s f -l format -d 'Format the output using the given Go template'
complete -f -c docker -n "__fish_seen_subcommand_from config ;and __fish_seen_subcommand_from inspect " -l pretty -d 'Print the information in a human friendly format'
complete -f -c docker -n "__fish_seen_subcommand_from config ;and __fish_seen_subcommand_from ls " -s f -l filter -d 'filter Filter output based on conditions provided'
complete -f -c docker -n "__fish_seen_subcommand_from config ;and __fish_seen_subcommand_from ls " -l format -d 'string Pretty-print configs using a Go template'
complete -f -c docker -n "__fish_seen_subcommand_from config ;and __fish_seen_subcommand_from ls " -s q -l quiet -d 'Only display IDs'
set -l container_subcommands attach commit cp create diff exec export inspect kill logs ls pause port prune rename restart rm run start stats stop top unpause update wait
complete -f -c docker -n "__fish_seen_subcommand_from container ;and not __fish_seen_subcommand_from $container_subcommands " -a attach -d 'Attach local standard input, output, and error streams to a running container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and not __fish_seen_subcommand_from $container_subcommands " -a commit -d 'Create a new image from a container\'s changes'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and not __fish_seen_subcommand_from $container_subcommands " -a cp -d 'Copy files/folders between a container and the local filesystem'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and not __fish_seen_subcommand_from $container_subcommands " -a create -d 'Create a new container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and not __fish_seen_subcommand_from $container_subcommands " -a diff -d 'Inspect changes to files or directories on a container\'s filesystem'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and not __fish_seen_subcommand_from $container_subcommands " -a exec -d 'Run a command in a running container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and not __fish_seen_subcommand_from $container_subcommands " -a export -d 'Export a container\'s filesystem as a tar archive'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and not __fish_seen_subcommand_from $container_subcommands " -a inspect -d 'Display detailed information on one or more containers'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and not __fish_seen_subcommand_from $container_subcommands " -a kill -d 'Kill one or more running containers'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and not __fish_seen_subcommand_from $container_subcommands " -a logs -d 'Fetch the logs of a container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and not __fish_seen_subcommand_from $container_subcommands " -a ls -d 'List containers'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and not __fish_seen_subcommand_from $container_subcommands " -a pause -d 'Pause all processes within one or more containers'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and not __fish_seen_subcommand_from $container_subcommands " -a port -d 'List port mappings or a specific mapping for the container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and not __fish_seen_subcommand_from $container_subcommands " -a prune -d 'Remove all stopped containers'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and not __fish_seen_subcommand_from $container_subcommands " -a rename -d 'Rename a container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and not __fish_seen_subcommand_from $container_subcommands " -a restart -d 'Restart one or more containers'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and not __fish_seen_subcommand_from $container_subcommands " -a rm -d 'Remove one or more containers'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and not __fish_seen_subcommand_from $container_subcommands " -a run -d 'Run a command in a new container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and not __fish_seen_subcommand_from $container_subcommands " -a start -d 'Start one or more stopped containers'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and not __fish_seen_subcommand_from $container_subcommands " -a stats -d 'Display a live stream of container(s) resource usage statistics'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and not __fish_seen_subcommand_from $container_subcommands " -a stop -d 'Stop one or more running containers'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and not __fish_seen_subcommand_from $container_subcommands " -a top -d 'Display the running processes of a container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and not __fish_seen_subcommand_from $container_subcommands " -a unpause -d 'Unpause all processes within one or more containers'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and not __fish_seen_subcommand_from $container_subcommands " -a update -d 'Update configuration of one or more containers'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and not __fish_seen_subcommand_from $container_subcommands " -a wait -d 'Block until one or more containers stop, then print their exit codes'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from attach " -l detach-keys -d 'string Override the key sequence for detaching a container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from attach " -l no-stdin -d 'Do not attach STDIN'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from attach " -l sig-proxy -d 'Proxy all received signals to the process (default true)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from commit " -s a -l author -d 'Author (e.g., "John Hannibal Smith <hannibal@a-team.com>")'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from commit " -s c -l change -d 'Apply Dockerfile instruction to the created image'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from commit " -s m -l message -d 'Commit message'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from commit " -s p -l pause -d 'Pause container during commit (default true)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from cp " -s a -l archive -d 'Archive mode (copy all uid/gid information)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from cp " -s L -l follow-link -d 'Always follow symbol link in SRC_PATH'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l add-host -d 'list Add a custom host-to-IP mapping (host:ip)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -s a -l attach -d 'Attach to STDIN, STDOUT or STDERR'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l blkio-weight -d 'uint16 Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l blkio-weight-device -d 'list Block IO weight (relative device weight) (default [])'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l cap-add -d 'list Add Linux capabilities'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l cap-drop -d 'list Drop Linux capabilities'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l cgroup-parent -d 'string Optional parent cgroup for the container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l cidfile -d 'string Write the container ID to the file'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l cpu-count -d 'int CPU count (Windows only)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l cpu-percent -d 'int CPU percent (Windows only)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l cpu-period -d 'int Limit CPU CFS (Completely Fair Scheduler) period'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l cpu-quota -d 'int Limit CPU CFS (Completely Fair Scheduler) quota'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l cpu-rt-period -d 'int Limit CPU real-time period in microseconds'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l cpu-rt-runtime -d 'int Limit CPU real-time runtime in microseconds'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -s c -l cpu-shares -d 'int CPU shares (relative weight)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l cpus -d 'decimal Number of CPUs'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l cpuset-cpus -d 'string CPUs in which to allow execution (0-3, 0,1)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l cpuset-mems -d 'string MEMs in which to allow execution (0-3, 0,1)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l device -d 'list Add a host device to the container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l device-cgroup-rule -d 'list Add a rule to the cgroup allowed devices list'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l device-read-bps -d 'list Limit read rate (bytes per second) from a device (default [])'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l device-read-iops -d 'list Limit read rate (IO per second) from a device (default [])'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l device-write-bps -d 'list Limit write rate (bytes per second) to a device (default [])'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l device-write-iops -d 'list Limit write rate (IO per second) to a device (default [])'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l disable-content-trust -d 'Skip image verification (default true)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l dns -d 'list Set custom DNS servers'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l dns-option -d 'list Set DNS options'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l dns-search -d 'list Set custom DNS search domains'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l entrypoint -d 'string Overwrite the default ENTRYPOINT of the image'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -s e -l env -d 'Set environment variables'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l env-file -d 'list Read in a file of environment variables'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l expose -d 'list Expose a port or a range of ports'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l group-add -d 'list Add additional groups to join'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l health-cmd -d 'string Command to run to check health'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l health-interval -d 'duration Time between running the check (ms|s|m|h) (default 0s)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l health-retries -d 'int Consecutive failures needed to report unhealthy'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l health-start-period -d 'duration Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l health-timeout -d 'duration Maximum time to allow one check to run (ms|s|m|h) (default 0s)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l help -d 'Print usage'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -s h -l hostname -d 'Container host name'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l init -d 'Run an init inside the container that forwards signals and reaps processes'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -s i -l interactive -d 'Keep STDIN open even if not attached'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l io-maxbandwidth -d 'bytes Maximum IO bandwidth limit for the system drive (Windows only)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l io-maxiops -d 'uint Maximum IOps limit for the system drive (Windows only)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l ip -d 'string IPv4 address (e.g., 172.30.100.104)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l ip6 -d 'string IPv6 address (e.g., 2001:db8::33)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l ipc -d 'string IPC mode to use'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l isolation -d 'string Container isolation technology'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l kernel-memory -d 'bytes Kernel memory limit'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -s l -l label -d 'Set meta data on a container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l label-file -d 'list Read in a line delimited file of labels'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l link -d 'list Add link to another container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l link-local-ip -d 'list Container IPv4/IPv6 link-local addresses'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l log-driver -d 'string Logging driver for the container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l log-opt -d 'list Log driver options'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l mac-address -d 'string Container MAC address (e.g., 92:d0:c6:0a:29:33)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -s m -l memory -d 'bytes Memory limit'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l memory-reservation -d 'bytes Memory soft limit'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l memory-swap -d 'bytes Swap limit equal to memory plus swap: \'-1\' to enable unlimited swap'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l memory-swappiness -d 'int Tune container memory swappiness (0 to 100) (default -1)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l mount -d 'mount Attach a filesystem mount to the container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l name -d 'string Assign a name to the container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l network -d 'string Connect a container to a network (default "default")'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l network-alias -d 'list Add network-scoped alias for the container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l no-healthcheck -d 'Disable any container-specified HEALTHCHECK'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l oom-kill-disable -d 'Disable OOM Killer'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l oom-score-adj -d 'int Tune host\'s OOM preferences (-1000 to 1000)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l pid -d 'string PID namespace to use'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l pids-limit -d 'int Tune container pids limit (set -1 for unlimited)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l platform -d 'string Set platform if server is multi-platform capable'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l privileged -d 'Give extended privileges to this container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -s p -l publish -d 'Publish a container\'s port(s) to the host'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -s P -l publish-all -d 'Publish all exposed ports to random ports'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l read-only -d 'Mount the container\'s root filesystem as read only'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l restart -d 'string Restart policy to apply when a container exits (default "no")'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l rm -d 'Automatically remove the container when it exits'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l runtime -d 'string Runtime to use for this container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l security-opt -d 'list Security Options'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l shm-size -d 'bytes Size of /dev/shm'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l stop-signal -d 'string Signal to stop a container (default "SIGTERM")'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l stop-timeout -d 'int Timeout (in seconds) to stop a container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l storage-opt -d 'list Storage driver options for the container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l sysctl -d 'map Sysctl options (default map[])'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l tmpfs -d 'list Mount a tmpfs directory'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -s t -l tty -d 'Allocate a pseudo-TTY'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l ulimit -d 'ulimit Ulimit options (default [])'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -s u -l user -d 'Username or UID (format: <name|uid>[:<group|gid>])'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l userns -d 'string User namespace to use'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l uts -d 'string UTS namespace to use'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -s v -l volume -d 'Bind mount a volume'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l volume-driver -d 'string Optional volume driver for the container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -l volumes-from -d 'list Mount volumes from the specified container(s)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from create " -s w -l workdir -d 'Working directory inside the container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from exec " -s d -l detach -d 'Detached mode: run command in the background'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from exec " -l detach-keys -d 'string Override the key sequence for detaching a container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from exec " -s e -l env -d 'Set environment variables'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from exec " -s i -l interactive -d 'Keep STDIN open even if not attached'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from exec " -l privileged -d 'Give extended privileges to the command'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from exec " -s t -l tty -d 'Allocate a pseudo-TTY'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from exec " -s u -l user -d 'Username or UID (format: <name|uid>[:<group|gid>])'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from exec " -s w -l workdir -d 'Working directory inside the container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from export " -s o -l output -d 'Write to a file, instead of STDOUT'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from inspect " -s f -l format -d 'Format the output using the given Go template'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from inspect " -s s -l size -d 'Display total file sizes'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from kill " -s s -l signal -d 'Signal to send to the container (default "KILL")'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from logs " -l details -d 'Show extra details provided to logs'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from logs " -s f -l follow -d 'Follow log output'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from logs " -l since -d 'string Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from logs " -l tail -d 'string Number of lines to show from the end of the logs (default "all")'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from logs " -s t -l timestamps -d 'Show timestamps'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from logs " -l until -d 'string Show logs before a timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from ls " -s a -l all -d 'Show all containers (default shows just running)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from ls " -s f -l filter -d 'filter Filter output based on conditions provided'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from ls " -l format -d 'string Pretty-print containers using a Go template'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from ls " -s n -l last -d 'int Show n last created containers (includes all states) (default -1)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from ls " -s l -l latest -d 'Show the latest created container (includes all states)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from ls " -l no-trunc -d 'Don\'t truncate output'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from ls " -s q -l quiet -d 'Only display numeric IDs'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from ls " -s s -l size -d 'Display total file sizes'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from prune " -l filter -d 'filter Provide filter values (e.g. \'until=<timestamp>\')'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from prune " -s f -l force -d 'Do not prompt for confirmation'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from restart " -s t -l time -d 'int Seconds to wait for stop before killing the container (default 10)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from rm " -s f -l force -d 'Force the removal of a running container (uses SIGKILL)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from rm " -s l -l link -d 'Remove the specified link'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from rm " -s v -l volumes -d 'Remove the volumes associated with the container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l add-host -d 'list Add a custom host-to-IP mapping (host:ip)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -s a -l attach -d 'Attach to STDIN, STDOUT or STDERR'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l blkio-weight -d 'uint16 Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l blkio-weight-device -d 'list Block IO weight (relative device weight) (default [])'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l cap-add -d 'list Add Linux capabilities'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l cap-drop -d 'list Drop Linux capabilities'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l cgroup-parent -d 'string Optional parent cgroup for the container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l cidfile -d 'string Write the container ID to the file'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l cpu-count -d 'int CPU count (Windows only)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l cpu-percent -d 'int CPU percent (Windows only)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l cpu-period -d 'int Limit CPU CFS (Completely Fair Scheduler) period'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l cpu-quota -d 'int Limit CPU CFS (Completely Fair Scheduler) quota'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l cpu-rt-period -d 'int Limit CPU real-time period in microseconds'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l cpu-rt-runtime -d 'int Limit CPU real-time runtime in microseconds'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -s c -l cpu-shares -d 'int CPU shares (relative weight)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l cpus -d 'decimal Number of CPUs'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l cpuset-cpus -d 'string CPUs in which to allow execution (0-3, 0,1)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l cpuset-mems -d 'string MEMs in which to allow execution (0-3, 0,1)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -s d -l detach -d 'Run container in background and print container ID'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l detach-keys -d 'string Override the key sequence for detaching a container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l device -d 'list Add a host device to the container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l device-cgroup-rule -d 'list Add a rule to the cgroup allowed devices list'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l device-read-bps -d 'list Limit read rate (bytes per second) from a device (default [])'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l device-read-iops -d 'list Limit read rate (IO per second) from a device (default [])'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l device-write-bps -d 'list Limit write rate (bytes per second) to a device (default [])'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l device-write-iops -d 'list Limit write rate (IO per second) to a device (default [])'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l disable-content-trust -d 'Skip image verification (default true)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l dns -d 'list Set custom DNS servers'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l dns-option -d 'list Set DNS options'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l dns-search -d 'list Set custom DNS search domains'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l entrypoint -d 'string Overwrite the default ENTRYPOINT of the image'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -s e -l env -d 'Set environment variables'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l env-file -d 'list Read in a file of environment variables'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l expose -d 'list Expose a port or a range of ports'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l group-add -d 'list Add additional groups to join'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l health-cmd -d 'string Command to run to check health'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l health-interval -d 'duration Time between running the check (ms|s|m|h) (default 0s)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l health-retries -d 'int Consecutive failures needed to report unhealthy'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l health-start-period -d 'duration Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l health-timeout -d 'duration Maximum time to allow one check to run (ms|s|m|h) (default 0s)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l help -d 'Print usage'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -s h -l hostname -d 'Container host name'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l init -d 'Run an init inside the container that forwards signals and reaps processes'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -s i -l interactive -d 'Keep STDIN open even if not attached'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l io-maxbandwidth -d 'bytes Maximum IO bandwidth limit for the system drive (Windows only)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l io-maxiops -d 'uint Maximum IOps limit for the system drive (Windows only)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l ip -d 'string IPv4 address (e.g., 172.30.100.104)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l ip6 -d 'string IPv6 address (e.g., 2001:db8::33)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l ipc -d 'string IPC mode to use'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l isolation -d 'string Container isolation technology'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l kernel-memory -d 'bytes Kernel memory limit'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -s l -l label -d 'Set meta data on a container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l label-file -d 'list Read in a line delimited file of labels'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l link -d 'list Add link to another container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l link-local-ip -d 'list Container IPv4/IPv6 link-local addresses'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l log-driver -d 'string Logging driver for the container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l log-opt -d 'list Log driver options'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l mac-address -d 'string Container MAC address (e.g., 92:d0:c6:0a:29:33)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -s m -l memory -d 'bytes Memory limit'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l memory-reservation -d 'bytes Memory soft limit'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l memory-swap -d 'bytes Swap limit equal to memory plus swap: \'-1\' to enable unlimited swap'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l memory-swappiness -d 'int Tune container memory swappiness (0 to 100) (default -1)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l mount -d 'mount Attach a filesystem mount to the container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l name -d 'string Assign a name to the container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l network -d 'string Connect a container to a network (default "default")'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l network-alias -d 'list Add network-scoped alias for the container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l no-healthcheck -d 'Disable any container-specified HEALTHCHECK'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l oom-kill-disable -d 'Disable OOM Killer'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l oom-score-adj -d 'int Tune host\'s OOM preferences (-1000 to 1000)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l pid -d 'string PID namespace to use'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l pids-limit -d 'int Tune container pids limit (set -1 for unlimited)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l platform -d 'string Set platform if server is multi-platform capable'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l privileged -d 'Give extended privileges to this container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -s p -l publish -d 'Publish a container\'s port(s) to the host'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -s P -l publish-all -d 'Publish all exposed ports to random ports'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l read-only -d 'Mount the container\'s root filesystem as read only'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l restart -d 'string Restart policy to apply when a container exits (default "no")'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l rm -d 'Automatically remove the container when it exits'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l runtime -d 'string Runtime to use for this container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l security-opt -d 'list Security Options'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l shm-size -d 'bytes Size of /dev/shm'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l sig-proxy -d 'Proxy received signals to the process (default true)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l stop-signal -d 'string Signal to stop a container (default "SIGTERM")'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l stop-timeout -d 'int Timeout (in seconds) to stop a container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l storage-opt -d 'list Storage driver options for the container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l sysctl -d 'map Sysctl options (default map[])'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l tmpfs -d 'list Mount a tmpfs directory'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -s t -l tty -d 'Allocate a pseudo-TTY'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l ulimit -d 'ulimit Ulimit options (default [])'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -s u -l user -d 'Username or UID (format: <name|uid>[:<group|gid>])'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l userns -d 'string User namespace to use'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l uts -d 'string UTS namespace to use'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -s v -l volume -d 'Bind mount a volume'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l volume-driver -d 'string Optional volume driver for the container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -l volumes-from -d 'list Mount volumes from the specified container(s)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from run " -s w -l workdir -d 'Working directory inside the container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from start " -s a -l attach -d 'Attach STDOUT/STDERR and forward signals'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from start " -l checkpoint -d 'string Restore from this checkpoint'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from start " -l checkpoint-dir -d 'string Use a custom checkpoint storage directory'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from start " -l detach-keys -d 'string Override the key sequence for detaching a container'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from start " -s i -l interactive -d 'Attach container\'s STDIN'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from stats " -s a -l all -d 'Show all containers (default shows just running)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from stats " -l format -d 'string Pretty-print images using a Go template'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from stats " -l no-stream -d 'Disable streaming stats and only pull the first result'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from stats " -l no-trunc -d 'Do not truncate output'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from stop " -s t -l time -d 'int Seconds to wait for stop before killing it (default 10)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from update " -l blkio-weight -d 'uint16 Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from update " -l cpu-period -d 'int Limit CPU CFS (Completely Fair Scheduler) period'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from update " -l cpu-quota -d 'int Limit CPU CFS (Completely Fair Scheduler) quota'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from update " -l cpu-rt-period -d 'int Limit the CPU real-time period in microseconds'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from update " -l cpu-rt-runtime -d 'int Limit the CPU real-time runtime in microseconds'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from update " -s c -l cpu-shares -d 'int CPU shares (relative weight)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from update " -l cpus -d 'decimal Number of CPUs'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from update " -l cpuset-cpus -d 'string CPUs in which to allow execution (0-3, 0,1)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from update " -l cpuset-mems -d 'string MEMs in which to allow execution (0-3, 0,1)'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from update " -l kernel-memory -d 'bytes Kernel memory limit'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from update " -s m -l memory -d 'bytes Memory limit'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from update " -l memory-reservation -d 'bytes Memory soft limit'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from update " -l memory-swap -d 'bytes Swap limit equal to memory plus swap: \'-1\' to enable unlimited swap'
complete -f -c docker -n "__fish_seen_subcommand_from container ;and __fish_seen_subcommand_from update " -l restart -d 'string Restart policy to apply when a container exits'
set -l insert_subcommands build history import inspect load ls prune pull push rm save tag
complete -f -c docker -n "__fish_seen_subcommand_from image ;and not __fish_seen_subcommand_from $insert_subcommands " -a build -d 'Build an image from a Dockerfile'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and not __fish_seen_subcommand_from $insert_subcommands " -a history -d 'Show the history of an image'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and not __fish_seen_subcommand_from $insert_subcommands " -a import -d 'Import the contents from a tarball to create a filesystem image'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and not __fish_seen_subcommand_from $insert_subcommands " -a inspect -d 'Display detailed information on one or more images'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and not __fish_seen_subcommand_from $insert_subcommands " -a load -d 'Load an image from a tar archive or STDIN'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and not __fish_seen_subcommand_from $insert_subcommands " -a ls -d 'List images'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and not __fish_seen_subcommand_from $insert_subcommands " -a prune -d 'Remove unused images'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and not __fish_seen_subcommand_from $insert_subcommands " -a pull -d 'Pull an image or a repository from a registry'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and not __fish_seen_subcommand_from $insert_subcommands " -a push -d 'Push an image or a repository to a registry'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and not __fish_seen_subcommand_from $insert_subcommands " -a rm -d 'Remove one or more images'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and not __fish_seen_subcommand_from $insert_subcommands " -a save -d 'Save one or more images to a tar archive (streamed to STDOUT by default)'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and not __fish_seen_subcommand_from $insert_subcommands " -a tag -d 'Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -l add-host -d 'list Add a custom host-to-IP mapping (host:ip)'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -l build-arg -d 'list Set build-time variables'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -l cache-from -d 'strings Images to consider as cache sources'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -l cgroup-parent -d 'string Optional parent cgroup for the container'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -l compress -d 'Compress the build context using gzip'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -l cpu-period -d 'int Limit the CPU CFS (Completely Fair Scheduler) period'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -l cpu-quota -d 'int Limit the CPU CFS (Completely Fair Scheduler) quota'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -s c -l cpu-shares -d 'int CPU shares (relative weight)'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -l cpuset-cpus -d 'string CPUs in which to allow execution (0-3, 0,1)'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -l cpuset-mems -d 'string MEMs in which to allow execution (0-3, 0,1)'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -l disable-content-trust -d 'Skip image verification (default true)'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -s f -l file -d 'Name of the Dockerfile (Default is \'PATH/Dockerfile\')'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -l force-rm -d 'Always remove intermediate containers'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -l iidfile -d 'string Write the image ID to the file'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -l isolation -d 'string Container isolation technology'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -l label -d 'list Set metadata for an image'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -s m -l memory -d 'bytes Memory limit'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -l memory-swap -d 'bytes Swap limit equal to memory plus swap: \'-1\' to enable unlimited swap'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -l network -d 'string Set the networking mode for the RUN instructions during build (default "default")'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -l no-cache -d 'Do not use cache when building the image'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -l platform -d 'string Set platform if server is multi-platform capable'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -l pull -d 'Always attempt to pull a newer version of the image'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -s q -l quiet -d 'Suppress the build output and print image ID on success'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -l rm -d 'Remove intermediate containers after a successful build (default true)'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -l security-opt -d 'strings Security options'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -l shm-size -d 'bytes Size of /dev/shm'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -l squash -d 'Squash newly built layers into a single new layer'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -l stream -d 'Stream attaches to server to negotiate build context'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -s t -l tag -d 'Name and optionally a tag in the \'name:tag\' format'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -l target -d 'string Set the target build stage to build.'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from build " -l ulimit -d 'ulimit Ulimit options (default [])'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from history " -l format -d 'string Pretty-print images using a Go template'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from history " -s H -l human -d 'Print sizes and dates in human readable format (default true)'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from history " -l no-trunc -d 'Don\'t truncate output'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from history " -s q -l quiet -d 'Only show numeric IDs'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from import " -s c -l change -d 'Apply Dockerfile instruction to the created image'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from import " -s m -l message -d 'Set commit message for imported image'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from inspect " -s f -l format -d 'Format the output using the given Go template'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from load " -s i -l input -d 'Read from tar archive file, instead of STDIN'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from load " -s q -l quiet -d 'Suppress the load output'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from ls " -s a -l all -d 'Show all images (default hides intermediate images)'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from ls " -l digests -d 'Show digests'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from ls " -s f -l filter -d 'filter Filter output based on conditions provided'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from ls " -l format -d 'string Pretty-print images using a Go template'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from ls " -l no-trunc -d 'Don\'t truncate output'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from ls " -s q -l quiet -d 'Only show numeric IDs'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from prune " -s a -l all -d 'Remove all unused images, not just dangling ones'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from prune " -l filter -d 'filter Provide filter values (e.g. \'until=<timestamp>\')'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from prune " -s f -l force -d 'Do not prompt for confirmation'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from pull " -s a -l all-tags -d 'Download all tagged images in the repository'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from pull " -l disable-content-trust -d 'Skip image verification (default true)'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from pull " -l platform -d 'string Set platform if server is multi-platform capable'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from push " -l disable-content-trust -d 'Skip image signing (default true)'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from rm " -s f -l force -d 'Force removal of the image'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from rm " -l no-prune -d 'Do not delete untagged parents'
complete -f -c docker -n "__fish_seen_subcommand_from image ;and __fish_seen_subcommand_from save " -s o -l output -d 'Write to a file, instead of STDOUT'
set -l network_subcommands connect create disconnect inspect ls prune rm
complete -f -c docker -n "__fish_seen_subcommand_from network ;and not __fish_seen_subcommand_from $network_subcommands" -a connect -d 'Connect a container to a network'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and not __fish_seen_subcommand_from $network_subcommands" -a create -d 'Create a network'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and not __fish_seen_subcommand_from $network_subcommands" -a disconnect -d 'Disconnect a container from a network'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and not __fish_seen_subcommand_from $network_subcommands" -a inspect -d 'Display detailed information on one or more networks'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and not __fish_seen_subcommand_from $network_subcommands" -a ls -d 'List networks'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and not __fish_seen_subcommand_from $network_subcommands" -a prune -d 'Remove all unused networks'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and not __fish_seen_subcommand_from $network_subcommands" -a rm -d 'Remove one or more networks'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and __fish_seen_subcommand_from connect " -l alias -d 'strings Add network-scoped alias for the container'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and __fish_seen_subcommand_from connect " -l ip -d 'string IPv4 address (e.g., 172.30.100.104)'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and __fish_seen_subcommand_from connect " -l ip6 -d 'string IPv6 address (e.g., 2001:db8::33)'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and __fish_seen_subcommand_from connect " -l link -d 'list Add link to another container'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and __fish_seen_subcommand_from connect " -l link-local-ip -d 'strings Add a link-local address for the container'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and __fish_seen_subcommand_from create " -l attachable -d 'Enable manual container attachment'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and __fish_seen_subcommand_from create " -l aux-address -d 'map Auxiliary IPv4 or IPv6 addresses used by Network driver (default map[])'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and __fish_seen_subcommand_from create " -l config-from -d 'string The network from which copying the configuration'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and __fish_seen_subcommand_from create " -l config-only -d 'Create a configuration only network'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and __fish_seen_subcommand_from create " -s d -l driver -d 'Driver to manage the Network (default "bridge")'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and __fish_seen_subcommand_from create " -l gateway -d 'strings IPv4 or IPv6 Gateway for the master subnet'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and __fish_seen_subcommand_from create " -l ingress -d 'Create swarm routing-mesh network'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and __fish_seen_subcommand_from create " -l internal -d 'Restrict external access to the network'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and __fish_seen_subcommand_from create " -l ip-range -d 'strings Allocate container ip from a sub-range'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and __fish_seen_subcommand_from create " -l ipam-driver -d 'string IP Address Management Driver (default "default")'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and __fish_seen_subcommand_from create " -l ipam-opt -d 'map Set IPAM driver specific options (default map[])'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and __fish_seen_subcommand_from create " -l ipv6 -d 'Enable IPv6 networking'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and __fish_seen_subcommand_from create " -l label -d 'list Set metadata on a network'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and __fish_seen_subcommand_from create " -s o -l opt -d 'map Set driver specific options (default map[])'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and __fish_seen_subcommand_from create " -l scope -d 'string Control the network\'s scope'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and __fish_seen_subcommand_from create " -l subnet -d 'strings Subnet in CIDR format that represents a network segment'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and __fish_seen_subcommand_from disconnect " -s f -l force -d 'Force the container to disconnect from a network'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and __fish_seen_subcommand_from inspect " -s f -l format -d 'Format the output using the given Go template'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and __fish_seen_subcommand_from inspect " -s v -l verbose -d 'Verbose output for diagnostics'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and __fish_seen_subcommand_from ls " -s f -l filter -d 'filter Provide filter values (e.g. \'driver=bridge\')'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and __fish_seen_subcommand_from ls " -l format -d 'string Pretty-print networks using a Go template'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and __fish_seen_subcommand_from ls " -l no-trunc -d 'Do not truncate the output'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and __fish_seen_subcommand_from ls " -s q -l quiet -d 'Only display network IDs'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and __fish_seen_subcommand_from prune " -l filter -d 'filter Provide filter values (e.g. \'until=<timestamp>\')'
complete -f -c docker -n "__fish_seen_subcommand_from network ;and __fish_seen_subcommand_from prune " -s f -l force -d 'Do not prompt for confirmation'
set -l node_subcommands demote inspect ls promote ps rm update
complete -f -c docker -n "__fish_seen_subcommand_from node ;and not __fish_seen_subcommand_from $node_subcommands" -a demote -d 'Demote one or more nodes from manager in the swarm'
complete -f -c docker -n "__fish_seen_subcommand_from node ;and not __fish_seen_subcommand_from $node_subcommands" -a inspect -d 'Display detailed information on one or more nodes'
complete -f -c docker -n "__fish_seen_subcommand_from node ;and not __fish_seen_subcommand_from $node_subcommands" -a ls -d 'List nodes in the swarm'
complete -f -c docker -n "__fish_seen_subcommand_from node ;and not __fish_seen_subcommand_from $node_subcommands" -a promote -d 'Promote one or more nodes to manager in the swarm'
complete -f -c docker -n "__fish_seen_subcommand_from node ;and not __fish_seen_subcommand_from $node_subcommands" -a ps -d 'List tasks running on one or more nodes, defaults to current node'
complete -f -c docker -n "__fish_seen_subcommand_from node ;and not __fish_seen_subcommand_from $node_subcommands" -a rm -d 'Remove one or more nodes from the swarm'
complete -f -c docker -n "__fish_seen_subcommand_from node ;and not __fish_seen_subcommand_from $node_subcommands" -a update -d 'Update a node'
complete -f -c docker -n "__fish_seen_subcommand_from node ;and __fish_seen_subcommand_from inspect " -s f -l format -d 'Format the output using the given Go template'
complete -f -c docker -n "__fish_seen_subcommand_from node ;and __fish_seen_subcommand_from inspect " -l pretty -d 'Print the information in a human friendly format'
complete -f -c docker -n "__fish_seen_subcommand_from node ;and __fish_seen_subcommand_from ls " -s f -l filter -d 'filter Filter output based on conditions provided'
complete -f -c docker -n "__fish_seen_subcommand_from node ;and __fish_seen_subcommand_from ls " -l format -d 'string Pretty-print nodes using a Go template'
complete -f -c docker -n "__fish_seen_subcommand_from node ;and __fish_seen_subcommand_from ls " -s q -l quiet -d 'Only display IDs'
complete -f -c docker -n "__fish_seen_subcommand_from node ;and __fish_seen_subcommand_from ps " -s f -l filter -d 'filter Filter output based on conditions provided'
complete -f -c docker -n "__fish_seen_subcommand_from node ;and __fish_seen_subcommand_from ps " -l format -d 'string Pretty-print tasks using a Go template'
complete -f -c docker -n "__fish_seen_subcommand_from node ;and __fish_seen_subcommand_from ps " -l no-resolve -d 'Do not map IDs to Names'
complete -f -c docker -n "__fish_seen_subcommand_from node ;and __fish_seen_subcommand_from ps " -l no-trunc -d 'Do not truncate output'
complete -f -c docker -n "__fish_seen_subcommand_from node ;and __fish_seen_subcommand_from ps " -s q -l quiet -d 'Only display task IDs'
complete -f -c docker -n "__fish_seen_subcommand_from node ;and __fish_seen_subcommand_from rm " -s f -l force -d 'Force remove a node from the swarm'
complete -f -c docker -n "__fish_seen_subcommand_from node ;and __fish_seen_subcommand_from update " -l availability -d 'string Availability of the node ("active"|"pause"|"drain")'
complete -f -c docker -n "__fish_seen_subcommand_from node ;and __fish_seen_subcommand_from update " -l label-add -d 'list Add or update a node label (key=value)'
complete -f -c docker -n "__fish_seen_subcommand_from node ;and __fish_seen_subcommand_from update " -l label-rm -d 'list Remove a node label if exists'
complete -f -c docker -n "__fish_seen_subcommand_from node ;and __fish_seen_subcommand_from update " -l role -d 'string Role of the node ("worker"|"manager")'
set -l plugin_subcommands create disable enable inspect install ls push rm set upgrade
complete -f -c docker -n "__fish_seen_subcommand_from plugin ;and not __fish_seen_subcommand_from $plugin_subcommands" -a create -d 'Create a plugin from a rootfs and configuration. Plugin data directory must contain config.json and rootfs directory.'
complete -f -c docker -n "__fish_seen_subcommand_from plugin ;and not __fish_seen_subcommand_from $plugin_subcommands" -a disable -d 'Disable a plugin'
complete -f -c docker -n "__fish_seen_subcommand_from plugin ;and not __fish_seen_subcommand_from $plugin_subcommands" -a enable -d 'Enable a plugin'
complete -f -c docker -n "__fish_seen_subcommand_from plugin ;and not __fish_seen_subcommand_from $plugin_subcommands" -a inspect -d 'Display detailed information on one or more plugins'
complete -f -c docker -n "__fish_seen_subcommand_from plugin ;and not __fish_seen_subcommand_from $plugin_subcommands" -a install -d 'Install a plugin'
complete -f -c docker -n "__fish_seen_subcommand_from plugin ;and not __fish_seen_subcommand_from $plugin_subcommands" -a ls -d 'List plugins'
complete -f -c docker -n "__fish_seen_subcommand_from plugin ;and not __fish_seen_subcommand_from $plugin_subcommands" -a push -d 'Push a plugin to a registry'
complete -f -c docker -n "__fish_seen_subcommand_from plugin ;and not __fish_seen_subcommand_from $plugin_subcommands" -a rm -d 'Remove one or more plugins'
complete -f -c docker -n "__fish_seen_subcommand_from plugin ;and not __fish_seen_subcommand_from $plugin_subcommands" -a set -d 'Change settings for a plugin'
complete -f -c docker -n "__fish_seen_subcommand_from plugin ;and not __fish_seen_subcommand_from $plugin_subcommands" -a upgrade -d 'Upgrade an existing plugin'
complete -f -c docker -n "__fish_seen_subcommand_from plugin ;and __fish_seen_subcommand_from create " -l compress -d 'Compress the context using gzip'
complete -f -c docker -n "__fish_seen_subcommand_from plugin ;and __fish_seen_subcommand_from disable " -s f -l force -d 'Force the disable of an active plugin'
complete -f -c docker -n "__fish_seen_subcommand_from plugin ;and __fish_seen_subcommand_from enable " -l timeout -d 'int HTTP client timeout (in seconds) (default 30)'
complete -f -c docker -n "__fish_seen_subcommand_from plugin ;and __fish_seen_subcommand_from inspect " -s f -l format -d 'Format the output using the given Go template'
complete -f -c docker -n "__fish_seen_subcommand_from plugin ;and __fish_seen_subcommand_from install " -l alias -d 'string Local name for plugin'
complete -f -c docker -n "__fish_seen_subcommand_from plugin ;and __fish_seen_subcommand_from install " -l disable -d 'Do not enable the plugin on install'
complete -f -c docker -n "__fish_seen_subcommand_from plugin ;and __fish_seen_subcommand_from install " -l disable-content-trust -d 'Skip image verification (default true)'
complete -f -c docker -n "__fish_seen_subcommand_from plugin ;and __fish_seen_subcommand_from install " -l grant-all-permissions -d 'Grant all permissions necessary to run the plugin'
complete -f -c docker -n "__fish_seen_subcommand_from plugin ;and __fish_seen_subcommand_from ls " -s f -l filter -d 'filter Provide filter values (e.g. \'enabled=true\')'
complete -f -c docker -n "__fish_seen_subcommand_from plugin ;and __fish_seen_subcommand_from ls " -l format -d 'string Pretty-print plugins using a Go template'
complete -f -c docker -n "__fish_seen_subcommand_from plugin ;and __fish_seen_subcommand_from ls " -l no-trunc -d 'Don\'t truncate output'
complete -f -c docker -n "__fish_seen_subcommand_from plugin ;and __fish_seen_subcommand_from ls " -s q -l quiet -d 'Only display plugin IDs'
complete -f -c docker -n "__fish_seen_subcommand_from plugin ;and __fish_seen_subcommand_from push " -l disable-content-trust -d 'Skip image signing (default true)'
complete -f -c docker -n "__fish_seen_subcommand_from plugin ;and __fish_seen_subcommand_from rm " -s f -l force -d 'Force the removal of an active plugin'
complete -f -c docker -n "__fish_seen_subcommand_from plugin ;and __fish_seen_subcommand_from upgrade " -l disable-content-trust -d 'Skip image verification (default true)'
complete -f -c docker -n "__fish_seen_subcommand_from plugin ;and __fish_seen_subcommand_from upgrade " -l grant-all-permissions -d 'Grant all permissions necessary to run the plugin'
complete -f -c docker -n "__fish_seen_subcommand_from plugin ;and __fish_seen_subcommand_from upgrade " -l skip-remote-check -d 'Do not check if specified remote plugin matches existing plugin image'
set -l secret_subcommands create inspect ls rm
complete -f -c docker -n "__fish_seen_subcommand_from secret ;and not __fish_seen_subcommand_from $secret_subcommands " -a create -d 'Create a secret from a file or STDIN as content'
complete -f -c docker -n "__fish_seen_subcommand_from secret ;and not __fish_seen_subcommand_from $secret_subcommands " -a inspect -d 'Display detailed information on one or more secrets'
complete -f -c docker -n "__fish_seen_subcommand_from secret ;and not __fish_seen_subcommand_from $secret_subcommands " -a ls -d 'List secrets'
complete -f -c docker -n "__fish_seen_subcommand_from secret ;and not __fish_seen_subcommand_from $secret_subcommands " -a rm -d 'Remove one or more secrets'
complete -f -c docker -n "__fish_seen_subcommand_from secret ;and __fish_seen_subcommand_from create " -s d -l driver -d 'Secret driver'
complete -f -c docker -n "__fish_seen_subcommand_from secret ;and __fish_seen_subcommand_from create " -s l -l label -d 'Secret labels'
complete -f -c docker -n "__fish_seen_subcommand_from secret ;and __fish_seen_subcommand_from create " -l template-driver -d 'string Template driver'
complete -f -c docker -n "__fish_seen_subcommand_from secret ;and __fish_seen_subcommand_from inspect " -s f -l format -d 'Format the output using the given Go template'
complete -f -c docker -n "__fish_seen_subcommand_from secret ;and __fish_seen_subcommand_from inspect " -l pretty -d 'Print the information in a human friendly format'
complete -f -c docker -n "__fish_seen_subcommand_from secret ;and __fish_seen_subcommand_from ls " -s f -l filter -d 'filter Filter output based on conditions provided'
complete -f -c docker -n "__fish_seen_subcommand_from secret ;and __fish_seen_subcommand_from ls " -l format -d 'string Pretty-print secrets using a Go template'
complete -f -c docker -n "__fish_seen_subcommand_from secret ;and __fish_seen_subcommand_from ls " -s q -l quiet -d 'Only display IDs'
set -l service_subcommands create inspect logs ls ps rm rollback scale update
complete -f -c docker -n "__fish_seen_subcommand_from service ;and not __fish_seen_subcommand_from $service_subcommands " -a create -d 'Create a new service'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and not __fish_seen_subcommand_from $service_subcommands " -a inspect -d 'Display detailed information on one or more services'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and not __fish_seen_subcommand_from $service_subcommands " -a logs -d 'Fetch the logs of a service or task'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and not __fish_seen_subcommand_from $service_subcommands " -a ls -d 'List services'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and not __fish_seen_subcommand_from $service_subcommands " -a ps -d 'List the tasks of one or more services'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and not __fish_seen_subcommand_from $service_subcommands " -a rm -d 'Remove one or more services'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and not __fish_seen_subcommand_from $service_subcommands " -a rollback -d 'Revert changes to a service\'s configuration'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and not __fish_seen_subcommand_from $service_subcommands " -a scale -d 'Scale one or multiple replicated services'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and not __fish_seen_subcommand_from $service_subcommands " -a update -d 'Update a service'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l config -d 'config Specify configurations to expose to the service'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l constraint -d 'list Placement constraints'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l container-label -d 'list Container labels'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l credential-spec -d 'credential-spec Credential spec for managed service account (Windows only)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -s d -l detach -d 'Exit immediately instead of waiting for the service to converge'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l dns -d 'list Set custom DNS servers'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l dns-option -d 'list Set DNS options'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l dns-search -d 'list Set custom DNS search domains'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l endpoint-mode -d 'string Endpoint mode (vip or dnsrr) (default "vip")'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l entrypoint -d 'command Overwrite the default ENTRYPOINT of the image'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -s e -l env -d 'Set environment variables'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l env-file -d 'list Read in a file of environment variables'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l generic-resource -d 'list User defined resources'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l group -d 'list Set one or more supplementary user groups for the container'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l health-cmd -d 'string Command to run to check health'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l health-interval -d 'duration Time between running the check (ms|s|m|h)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l health-retries -d 'int Consecutive failures needed to report unhealthy'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l health-start-period -d 'duration Start period for the container to initialize before counting retries towards unstable (ms|s|m|h)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l health-timeout -d 'duration Maximum time to allow one check to run (ms|s|m|h)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l host -d 'list Set one or more custom host-to-IP mappings (host:ip)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l hostname -d 'string Container hostname'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l isolation -d 'string Service container isolation mode'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -s l -l label -d 'Service labels'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l limit-cpu -d 'decimal Limit CPUs'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l limit-memory -d 'bytes Limit Memory'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l log-driver -d 'string Logging driver for service'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l log-opt -d 'list Logging driver options'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l mode -d 'string Service mode (replicated or global) (default "replicated")'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l mount -d 'mount Attach a filesystem mount to the service'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l name -d 'string Service name'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l network -d 'network Network attachments'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l no-healthcheck -d 'Disable any container-specified HEALTHCHECK'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l no-resolve-image -d 'Do not query the registry to resolve image digest and supported platforms'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l placement-pref -d 'pref Add a placement preference'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -s p -l publish -d 'port Publish a port as a node port'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -s q -l quiet -d 'Suppress progress output'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l read-only -d 'Mount the container\'s root filesystem as read only'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l replicas -d 'uint Number of tasks'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l reserve-cpu -d 'decimal Reserve CPUs'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l reserve-memory -d 'bytes Reserve Memory'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l restart-condition -d 'string Restart when condition is met ("none"|"on-failure"|"any") (default "any")'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l restart-delay -d 'duration Delay between restart attempts (ns|us|ms|s|m|h) (default 5s)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l restart-max-attempts -d 'uint Maximum number of restarts before giving up'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l restart-window -d 'duration Window used to evaluate the restart policy (ns|us|ms|s|m|h)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l rollback-delay -d 'duration Delay between task rollbacks (ns|us|ms|s|m|h) (default 0s)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l rollback-failure-action -d 'string Action on rollback failure ("pause"|"continue") (default "pause")'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l rollback-max-failure-ratio -d 'float Failure rate to tolerate during a rollback (default 0)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l rollback-monitor -d 'duration Duration after each task rollback to monitor for failure (ns|us|ms|s|m|h) (default 5s)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l rollback-order -d 'string Rollback order ("start-first"|"stop-first") (default "stop-first")'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l rollback-parallelism -d 'uint Maximum number of tasks rolled back simultaneously (0 to roll back all at once) (default 1)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l secret -d 'secret Specify secrets to expose to the service'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l stop-grace-period -d 'duration Time to wait before force killing a container (ns|us|ms|s|m|h) (default 10s)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l stop-signal -d 'string Signal to stop the container'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -s t -l tty -d 'Allocate a pseudo-TTY'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l update-delay -d 'duration Delay between updates (ns|us|ms|s|m|h) (default 0s)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l update-failure-action -d 'string Action on update failure ("pause"|"continue"|"rollback") (default "pause")'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l update-max-failure-ratio -d 'float Failure rate to tolerate during an update (default 0)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l update-monitor -d 'duration Duration after each task update to monitor for failure (ns|us|ms|s|m|h) (default 5s)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l update-order -d 'string Update order ("start-first"|"stop-first") (default "stop-first")'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l update-parallelism -d 'uint Maximum number of tasks updated simultaneously (0 to update all at once) (default 1)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -s u -l user -d 'Username or UID (format: <name|uid>[:<group|gid>])'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -l with-registry-auth -d 'Send registry authentication details to swarm agents'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from create " -s w -l workdir -d 'Working directory inside the container'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from inspect " -s f -l format -d 'Format the output using the given Go template'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from inspect " -l pretty -d 'Print the information in a human friendly format'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from logs " -l details -d 'Show extra details provided to logs'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from logs " -s f -l follow -d 'Follow log output'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from logs " -l no-resolve -d 'Do not map IDs to Names in output'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from logs " -l no-task-ids -d 'Do not include task IDs in output'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from logs " -l no-trunc -d 'Do not truncate output'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from logs " -l raw -d 'Do not neatly format logs'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from logs " -l since -d 'string Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from logs " -l tail -d 'string Number of lines to show from the end of the logs (default "all")'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from logs " -s t -l timestamps -d 'Show timestamps'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from ls " -s f -l filter -d 'filter Filter output based on conditions provided'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from ls " -l format -d 'string Pretty-print services using a Go template'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from ls " -s q -l quiet -d 'Only display IDs'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from ps " -s f -l filter -d 'filter Filter output based on conditions provided'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from ps " -l format -d 'string Pretty-print tasks using a Go template'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from ps " -l no-resolve -d 'Do not map IDs to Names'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from ps " -l no-trunc -d 'Do not truncate output'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from ps " -s q -l quiet -d 'Only display task IDs'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from rollback " -s d -l detach -d 'Exit immediately instead of waiting for the service to converge'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from rollback " -s q -l quiet -d 'Suppress progress output'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from scale " -s d -l detach -d 'Exit immediately instead of waiting for the service to converge'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l args -d 'command Service command args'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l config-add -d 'config Add or update a config file on a service'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l config-rm -d 'list Remove a configuration file'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l constraint-add -d 'list Add or update a placement constraint'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l constraint-rm -d 'list Remove a constraint'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l container-label-add -d 'list Add or update a container label'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l container-label-rm -d 'list Remove a container label by its key'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l credential-spec -d 'credential-spec Credential spec for managed service account (Windows only)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -s d -l detach -d 'Exit immediately instead of waiting for the service to converge'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l dns-add -d 'list Add or update a custom DNS server'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l dns-option-add -d 'list Add or update a DNS option'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l dns-option-rm -d 'list Remove a DNS option'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l dns-rm -d 'list Remove a custom DNS server'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l dns-search-add -d 'list Add or update a custom DNS search domain'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l dns-search-rm -d 'list Remove a DNS search domain'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l endpoint-mode -d 'string Endpoint mode (vip or dnsrr)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l entrypoint -d 'command Overwrite the default ENTRYPOINT of the image'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l env-add -d 'list Add or update an environment variable'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l env-rm -d 'list Remove an environment variable'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l force -d 'Force update even if no changes require it'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l generic-resource-add -d 'list Add a Generic resource'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l generic-resource-rm -d 'list Remove a Generic resource'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l group-add -d 'list Add an additional supplementary user group to the container'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l group-rm -d 'list Remove a previously added supplementary user group from the container'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l health-cmd -d 'string Command to run to check health'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l health-interval -d 'duration Time between running the check (ms|s|m|h)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l health-retries -d 'int Consecutive failures needed to report unhealthy'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l health-start-period -d 'duration Start period for the container to initialize before counting retries towards unstable (ms|s|m|h)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l health-timeout -d 'duration Maximum time to allow one check to run (ms|s|m|h)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l host-add -d 'list Add a custom host-to-IP mapping (host:ip)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l host-rm -d 'list Remove a custom host-to-IP mapping (host:ip)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l hostname -d 'string Container hostname'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l image -d 'string Service image tag'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l isolation -d 'string Service container isolation mode'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l label-add -d 'list Add or update a service label'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l label-rm -d 'list Remove a label by its key'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l limit-cpu -d 'decimal Limit CPUs'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l limit-memory -d 'bytes Limit Memory'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l log-driver -d 'string Logging driver for service'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l log-opt -d 'list Logging driver options'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l mount-add -d 'mount Add or update a mount on a service'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l mount-rm -d 'list Remove a mount by its target path'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l network-add -d 'network Add a network'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l network-rm -d 'list Remove a network'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l no-healthcheck -d 'Disable any container-specified HEALTHCHECK'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l no-resolve-image -d 'Do not query the registry to resolve image digest and supported platforms'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l placement-pref-add -d 'pref Add a placement preference'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l placement-pref-rm -d 'pref Remove a placement preference'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l publish-add -d 'port Add or update a published port'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l publish-rm -d 'port Remove a published port by its target port'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -s q -l quiet -d 'Suppress progress output'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l read-only -d 'Mount the container\'s root filesystem as read only'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l replicas -d 'uint Number of tasks'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l reserve-cpu -d 'decimal Reserve CPUs'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l reserve-memory -d 'bytes Reserve Memory'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l restart-condition -d 'string Restart when condition is met ("none"|"on-failure"|"any")'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l restart-delay -d 'duration Delay between restart attempts (ns|us|ms|s|m|h)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l restart-max-attempts -d 'uint Maximum number of restarts before giving up'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l restart-window -d 'duration Window used to evaluate the restart policy (ns|us|ms|s|m|h)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l rollback -d 'Rollback to previous specification'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l rollback-delay -d 'duration Delay between task rollbacks (ns|us|ms|s|m|h)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l rollback-failure-action -d 'string Action on rollback failure ("pause"|"continue")'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l rollback-max-failure-ratio -d 'float Failure rate to tolerate during a rollback'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l rollback-monitor -d 'duration Duration after each task rollback to monitor for failure (ns|us|ms|s|m|h)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l rollback-order -d 'string Rollback order ("start-first"|"stop-first")'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l rollback-parallelism -d 'uint Maximum number of tasks rolled back simultaneously (0 to roll back all at once)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l secret-add -d 'secret Add or update a secret on a service'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l secret-rm -d 'list Remove a secret'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l stop-grace-period -d 'duration Time to wait before force killing a container (ns|us|ms|s|m|h)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l stop-signal -d 'string Signal to stop the container'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -s t -l tty -d 'Allocate a pseudo-TTY'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l update-delay -d 'duration Delay between updates (ns|us|ms|s|m|h)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l update-failure-action -d 'string Action on update failure ("pause"|"continue"|"rollback")'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l update-max-failure-ratio -d 'float Failure rate to tolerate during an update'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l update-monitor -d 'duration Duration after each task update to monitor for failure (ns|us|ms|s|m|h)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l update-order -d 'string Update order ("start-first"|"stop-first")'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l update-parallelism -d 'uint Maximum number of tasks updated simultaneously (0 to update all at once)'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -s u -l user -d 'Username or UID (format: <name|uid>[:<group|gid>])'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -l with-registry-auth -d 'Send registry authentication details to swarm agents'
complete -f -c docker -n "__fish_seen_subcommand_from service ;and __fish_seen_subcommand_from update " -s w -l workdir -d 'Working directory inside the container'
set -l swarm_subcommands ca init join join-token leave unlock unlock-key update
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and not __fish_seen_subcommand_from $swarm_subcommands " -a ca -d 'Display and rotate the root CA'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and not __fish_seen_subcommand_from $swarm_subcommands " -a init -d 'Initialize a swarm'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and not __fish_seen_subcommand_from $swarm_subcommands " -a join -d 'Join a swarm as a node and/or manager'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and not __fish_seen_subcommand_from $swarm_subcommands " -a join-token -d 'Manage join tokens'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and not __fish_seen_subcommand_from $swarm_subcommands " -a leave -d 'Leave the swarm'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and not __fish_seen_subcommand_from $swarm_subcommands " -a unlock -d 'Unlock swarm'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and not __fish_seen_subcommand_from $swarm_subcommands " -a unlock-key -d 'Manage the unlock key'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and not __fish_seen_subcommand_from $swarm_subcommands " -a update -d 'Update the swarm'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from ca " -l ca-cert -d 'pem-file Path to the PEM-formatted root CA certificate to use for the new cluster'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from ca " -l ca-key -d 'pem-file Path to the PEM-formatted root CA key to use for the new cluster'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from ca " -l cert-expiry -d 'duration Validity period for node certificates (ns|us|ms|s|m|h) (default 2160h0m0s)'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from ca " -s d -l detach -d 'Exit immediately instead of waiting for the root rotation to converge'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from ca " -l external-ca -d 'external-ca Specifications of one or more certificate signing endpoints'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from ca " -s q -l quiet -d 'Suppress progress output'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from ca " -l rotate -d 'Rotate the swarm CA - if no certificate or key are provided, new ones will be generated'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from init " -l advertise-addr -d 'string Advertised address (format: <ip|interface>[:port])'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from init " -l autolock -d 'Enable manager autolocking (requiring an unlock key to start a stopped manager)'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from init " -l availability -d 'string Availability of the node ("active"|"pause"|"drain") (default "active")'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from init " -l cert-expiry -d 'duration Validity period for node certificates (ns|us|ms|s|m|h) (default 2160h0m0s)'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from init " -l data-path-addr -d 'string Address or interface to use for data path traffic (format: <ip|interface>)'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from init " -l dispatcher-heartbeat -d 'duration Dispatcher heartbeat period (ns|us|ms|s|m|h) (default 5s)'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from init " -l external-ca -d 'external-ca Specifications of one or more certificate signing endpoints'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from init " -l force-new-cluster -d 'Force create a new cluster from current state'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from init " -l listen-addr -d 'node-addr Listen address (format: <ip|interface>[:port]) (default 0.0.0.0:2377)'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from init " -l max-snapshots -d 'uint Number of additional Raft snapshots to retain'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from init " -l snapshot-interval -d 'uint Number of log entries between Raft snapshots (default 10000)'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from init " -l task-history-limit -d 'int Task history retention limit (default 5)'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from join " -l advertise-addr -d 'string Advertised address (format: <ip|interface>[:port])'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from join " -l availability -d 'string Availability of the node ("active"|"pause"|"drain") (default "active")'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from join " -l data-path-addr -d 'string Address or interface to use for data path traffic (format: <ip|interface>)'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from join " -l listen-addr -d 'node-addr Listen address (format: <ip|interface>[:port]) (default 0.0.0.0:2377)'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from join " -l token -d 'string Token for entry into the swarm'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from join-token " -s q -l quiet -d 'Only display token'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from join-token " -l rotate -d 'Rotate join token'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from leave " -s f -l force -d 'Force this node to leave the swarm, ignoring warnings'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from unlock-key " -s q -l quiet -d 'Only display token'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from unlock-key " -l rotate -d 'Rotate unlock key'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from update " -l autolock -d 'Change manager autolocking setting (true|false)'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from update " -l cert-expiry -d 'duration Validity period for node certificates (ns|us|ms|s|m|h) (default 2160h0m0s)'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from update " -l dispatcher-heartbeat -d 'duration Dispatcher heartbeat period (ns|us|ms|s|m|h) (default 5s)'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from update " -l external-ca -d 'external-ca Specifications of one or more certificate signing endpoints'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from update " -l max-snapshots -d 'uint Number of additional Raft snapshots to retain'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from update " -l snapshot-interval -d 'uint Number of log entries between Raft snapshots (default 10000)'
complete -f -c docker -n "__fish_seen_subcommand_from swarm ;and __fish_seen_subcommand_from update " -l task-history-limit -d 'int Task history retention limit (default 5)'
set -l system_subcommands df events info prune
complete -f -c docker -n "__fish_seen_subcommand_from system ;and not __fish_seen_subcommand_from $system_subcommands " -a df -d 'Show docker disk usage'
complete -f -c docker -n "__fish_seen_subcommand_from system ;and not __fish_seen_subcommand_from $system_subcommands " -a events -d 'Get real time events from the server'
complete -f -c docker -n "__fish_seen_subcommand_from system ;and not __fish_seen_subcommand_from $system_subcommands " -a info -d 'Display system-wide information'
complete -f -c docker -n "__fish_seen_subcommand_from system ;and not __fish_seen_subcommand_from $system_subcommands " -a prune -d 'Remove unused data'
complete -f -c docker -n "__fish_seen_subcommand_from system ;and __fish_seen_subcommand_from df " -l format -d 'string Pretty-print images using a Go template'
complete -f -c docker -n "__fish_seen_subcommand_from system ;and __fish_seen_subcommand_from df " -s v -l verbose -d 'Show detailed information on space usage'
complete -f -c docker -n "__fish_seen_subcommand_from system ;and __fish_seen_subcommand_from events " -s f -l filter -d 'filter Filter output based on conditions provided'
complete -f -c docker -n "__fish_seen_subcommand_from system ;and __fish_seen_subcommand_from events " -l format -d 'string Format the output using the given Go template'
complete -f -c docker -n "__fish_seen_subcommand_from system ;and __fish_seen_subcommand_from events " -l since -d 'string Show all events created since timestamp'
complete -f -c docker -n "__fish_seen_subcommand_from system ;and __fish_seen_subcommand_from events " -l until -d 'string Stream events until this timestamp'
complete -f -c docker -n "__fish_seen_subcommand_from system ;and __fish_seen_subcommand_from info " -s f -l format -d 'Format the output using the given Go template'
complete -f -c docker -n "__fish_seen_subcommand_from system ;and __fish_seen_subcommand_from prune " -s a -l all -d 'Remove all unused images not just dangling ones'
complete -f -c docker -n "__fish_seen_subcommand_from system ;and __fish_seen_subcommand_from prune " -l filter -d 'filter Provide filter values (e.g. \'label=<key>=<value>\')'
complete -f -c docker -n "__fish_seen_subcommand_from system ;and __fish_seen_subcommand_from prune " -s f -l force -d 'Do not prompt for confirmation'
complete -f -c docker -n "__fish_seen_subcommand_from system ;and __fish_seen_subcommand_from prune " -l volumes -d 'Prune volumes'
set -l trust_subcommands key signer inspect revoke sign
complete -f -c docker -n "__fish_seen_subcommand_from trust ;and not __fish_seen_subcommand_from $trust_subcommands " -a key -d 'Manage keys for signing Docker images'
complete -f -c docker -n "__fish_seen_subcommand_from trust ;and not __fish_seen_subcommand_from $trust_subcommands " -a signer -d 'Manage entities who can sign Docker images'
complete -f -c docker -n "__fish_seen_subcommand_from trust ;and not __fish_seen_subcommand_from $trust_subcommands " -a inspect -d 'Return low-level information about keys and signatures'
complete -f -c docker -n "__fish_seen_subcommand_from trust ;and not __fish_seen_subcommand_from $trust_subcommands " -a revoke -d 'Remove trust for an image'
complete -f -c docker -n "__fish_seen_subcommand_from trust ;and not __fish_seen_subcommand_from $trust_subcommands " -a sign -d 'Sign an image'
set -l trust_key_subcommands generate load
complete -f -c docker -n "__fish_seen_subcommand_from trust ;and __fish_seen_subcommand_from key ;and not __fish_seen_subcommand_from $trust_key_subcommands " -a generate -d 'Generate and load a signing key-pair'
complete -f -c docker -n "__fish_seen_subcommand_from trust ;and __fish_seen_subcommand_from key ;and not __fish_seen_subcommand_from $trust_key_subcommands " -a load -d 'Load a private key file for signing'
complete -f -c docker -n "__fish_seen_subcommand_from trust ;and __fish_seen_subcommand_from key ;and __fish_seen_subcommand_from generate " -l dir -d 'string Directory to generate key in, defaults to current directory'
complete -f -c docker -n "__fish_seen_subcommand_from trust ;and __fish_seen_subcommand_from key ;and __fish_seen_subcommand_from load " -l name -d 'string Name for the loaded key (default "signer")'
set -l trust_signer_subcommands add remove
complete -f -c docker -n "__fish_seen_subcommand_from trust ;and __fish_seen_subcommand_from signer ;and not __fish_seen_subcommand_from $trust_signer_subcommands" -a add -d 'Add a signer'
complete -f -c docker -n "__fish_seen_subcommand_from trust ;and __fish_seen_subcommand_from signer ;and not __fish_seen_subcommand_from $trust_signer_subcommands" -a remove -d 'Remove a signer'
complete -f -c docker -n "__fish_seen_subcommand_from trust ;and __fish_seen_subcommand_from signer ;and __fish_seen_subcommand_from add " -l key -d 'list Path to the signer\'s public key file'
complete -f -c docker -n "__fish_seen_subcommand_from trust ;and __fish_seen_subcommand_from signer ;and __fish_seen_subcommand_from remove " -s f -l force -d 'Do not prompt for confirmation before removing the most recent signer'
complete -f -c docker -n "__fish_seen_subcommand_from trust ;and __fish_seen_subcommand_from inspect " -l pretty -d 'Print the information in a human friendly format'
complete -f -c docker -n "__fish_seen_subcommand_from trust ;and __fish_seen_subcommand_from revoke " -s y -l yes -d 'Do not prompt for confirmation'
complete -f -c docker -n "__fish_seen_subcommand_from trust ;and __fish_seen_subcommand_from sign " -l local -d 'Sign a locally tagged image'
set -l volume_subcommands create inspect ls prune rm
complete -f -c docker -n "__fish_seen_subcommand_from volume ;and not __fish_seen_subcommand_from $volume_subcommands" -a create -d 'Create a volume'
complete -f -c docker -n "__fish_seen_subcommand_from volume ;and not __fish_seen_subcommand_from $volume_subcommands" -a inspect -d 'Display detailed information on one or more volumes'
complete -f -c docker -n "__fish_seen_subcommand_from volume ;and not __fish_seen_subcommand_from $volume_subcommands" -a ls -d 'List volumes'
complete -f -c docker -n "__fish_seen_subcommand_from volume ;and not __fish_seen_subcommand_from $volume_subcommands" -a prune -d 'Remove all unused local volumes'
complete -f -c docker -n "__fish_seen_subcommand_from volume ;and not __fish_seen_subcommand_from $volume_subcommands" -a rm -d 'Remove one or more volumes'
complete -f -c docker -n "__fish_seen_subcommand_from volume ;and __fish_seen_subcommand_from create " -s d -l driver -d 'Specify volume driver name (default "local")'
complete -f -c docker -n "__fish_seen_subcommand_from volume ;and __fish_seen_subcommand_from create " -l label -d 'list Set metadata for a volume'
complete -f -c docker -n "__fish_seen_subcommand_from volume ;and __fish_seen_subcommand_from create " -s o -l opt -d 'map Set driver specific options (default map[])'
complete -f -c docker -n "__fish_seen_subcommand_from volume ;and __fish_seen_subcommand_from inspect " -s f -l format -d 'Format the output using the given Go template'
complete -f -c docker -n "__fish_seen_subcommand_from volume ;and __fish_seen_subcommand_from ls " -s f -l filter -d 'filter Provide filter values (e.g. \'dangling=true\')'
complete -f -c docker -n "__fish_seen_subcommand_from volume ;and __fish_seen_subcommand_from ls " -l format -d 'string Pretty-print volumes using a Go template'
complete -f -c docker -n "__fish_seen_subcommand_from volume ;and __fish_seen_subcommand_from ls " -s q -l quiet -d 'Only display volume names'
complete -f -c docker -n "__fish_seen_subcommand_from volume ;and __fish_seen_subcommand_from prune " -l filter -d 'filter Provide filter values (e.g. \'label=<label>\')'
complete -f -c docker -n "__fish_seen_subcommand_from volume ;and __fish_seen_subcommand_from prune " -s f -l force -d 'Do not prompt for confirmation'
complete -f -c docker -n "__fish_seen_subcommand_from volume ;and __fish_seen_subcommand_from rm " -s f -l force -d 'Force the removal of one or more volumes'
complete -f -c docker -n "__fish_seen_subcommand_from attach " -l detach-keys -d 'string Override the key sequence for detaching a container'
complete -f -c docker -n "__fish_seen_subcommand_from attach " -l no-stdin -d 'Do not attach STDIN'
complete -f -c docker -n "__fish_seen_subcommand_from attach " -l sig-proxy -d 'Proxy all received signals to the process (default true)'
complete -f -c docker -n "__fish_seen_subcommand_from build " -l add-host -d 'list Add a custom host-to-IP mapping (host:ip)'
complete -f -c docker -n "__fish_seen_subcommand_from build " -l build-arg -d 'list Set build-time variables'
complete -f -c docker -n "__fish_seen_subcommand_from build " -l cache-from -d 'strings Images to consider as cache sources'
complete -f -c docker -n "__fish_seen_subcommand_from build " -l cgroup-parent -d 'string Optional parent cgroup for the container'
complete -f -c docker -n "__fish_seen_subcommand_from build " -l compress -d 'Compress the build context using gzip'
complete -f -c docker -n "__fish_seen_subcommand_from build " -l cpu-period -d 'int Limit the CPU CFS (Completely Fair Scheduler) period'
complete -f -c docker -n "__fish_seen_subcommand_from build " -l cpu-quota -d 'int Limit the CPU CFS (Completely Fair Scheduler) quota'
complete -f -c docker -n "__fish_seen_subcommand_from build " -s c -l cpu-shares -d 'int CPU shares (relative weight)'
complete -f -c docker -n "__fish_seen_subcommand_from build " -l cpuset-cpus -d 'string CPUs in which to allow execution (0-3, 0,1)'
complete -f -c docker -n "__fish_seen_subcommand_from build " -l cpuset-mems -d 'string MEMs in which to allow execution (0-3, 0,1)'
complete -f -c docker -n "__fish_seen_subcommand_from build " -l disable-content-trust -d 'Skip image verification (default true)'
complete -f -c docker -n "__fish_seen_subcommand_from build " -s f -l file -d 'Name of the Dockerfile (Default is \'PATH/Dockerfile\')'
complete -f -c docker -n "__fish_seen_subcommand_from build " -l force-rm -d 'Always remove intermediate containers'
complete -f -c docker -n "__fish_seen_subcommand_from build " -l iidfile -d 'string Write the image ID to the file'
complete -f -c docker -n "__fish_seen_subcommand_from build " -l isolation -d 'string Container isolation technology'
complete -f -c docker -n "__fish_seen_subcommand_from build " -l label -d 'list Set metadata for an image'
complete -f -c docker -n "__fish_seen_subcommand_from build " -s m -l memory -d 'bytes Memory limit'
complete -f -c docker -n "__fish_seen_subcommand_from build " -l memory-swap -d 'bytes Swap limit equal to memory plus swap: \'-1\' to enable unlimited swap'
complete -f -c docker -n "__fish_seen_subcommand_from build " -l network -d 'string Set the networking mode for the RUN instructions during build (default "default")'
complete -f -c docker -n "__fish_seen_subcommand_from build " -l no-cache -d 'Do not use cache when building the image'
complete -f -c docker -n "__fish_seen_subcommand_from build " -l platform -d 'string Set platform if server is multi-platform capable'
complete -f -c docker -n "__fish_seen_subcommand_from build " -l pull -d 'Always attempt to pull a newer version of the image'
complete -f -c docker -n "__fish_seen_subcommand_from build " -s q -l quiet -d 'Suppress the build output and print image ID on success'
complete -f -c docker -n "__fish_seen_subcommand_from build " -l rm -d 'Remove intermediate containers after a successful build (default true)'
complete -f -c docker -n "__fish_seen_subcommand_from build " -l security-opt -d 'strings Security options'
complete -f -c docker -n "__fish_seen_subcommand_from build " -l shm-size -d 'bytes Size of /dev/shm'
complete -f -c docker -n "__fish_seen_subcommand_from build " -l squash -d 'Squash newly built layers into a single new layer'
complete -f -c docker -n "__fish_seen_subcommand_from build " -l stream -d 'Stream attaches to server to negotiate build context'
complete -f -c docker -n "__fish_seen_subcommand_from build " -s t -l tag -d 'Name and optionally a tag in the \'name:tag\' format'
complete -f -c docker -n "__fish_seen_subcommand_from build " -l target -d 'string Set the target build stage to build.'
complete -f -c docker -n "__fish_seen_subcommand_from build " -l ulimit -d 'ulimit Ulimit options (default [])'
complete -f -c docker -n "__fish_seen_subcommand_from commit " -s a -l author -d 'Author (e.g., "John Hannibal Smith <hannibal@a-team.com>")'
complete -f -c docker -n "__fish_seen_subcommand_from commit " -s c -l change -d 'Apply Dockerfile instruction to the created image'
complete -f -c docker -n "__fish_seen_subcommand_from commit " -s m -l message -d 'Commit message'
complete -f -c docker -n "__fish_seen_subcommand_from commit " -s p -l pause -d 'Pause container during commit (default true)'
complete -f -c docker -n "__fish_seen_subcommand_from cp " -s a -l archive -d 'Archive mode (copy all uid/gid information)'
complete -f -c docker -n "__fish_seen_subcommand_from cp " -s L -l follow-link -d 'Always follow symbol link in SRC_PATH'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l add-host -d 'list Add a custom host-to-IP mapping (host:ip)'
complete -f -c docker -n "__fish_seen_subcommand_from create " -s a -l attach -d 'Attach to STDIN, STDOUT or STDERR'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l blkio-weight -d 'uint16 Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l blkio-weight-device -d 'list Block IO weight (relative device weight) (default [])'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l cap-add -d 'list Add Linux capabilities'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l cap-drop -d 'list Drop Linux capabilities'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l cgroup-parent -d 'string Optional parent cgroup for the container'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l cidfile -d 'string Write the container ID to the file'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l cpu-count -d 'int CPU count (Windows only)'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l cpu-percent -d 'int CPU percent (Windows only)'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l cpu-period -d 'int Limit CPU CFS (Completely Fair Scheduler) period'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l cpu-quota -d 'int Limit CPU CFS (Completely Fair Scheduler) quota'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l cpu-rt-period -d 'int Limit CPU real-time period in microseconds'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l cpu-rt-runtime -d 'int Limit CPU real-time runtime in microseconds'
complete -f -c docker -n "__fish_seen_subcommand_from create " -s c -l cpu-shares -d 'int CPU shares (relative weight)'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l cpus -d 'decimal Number of CPUs'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l cpuset-cpus -d 'string CPUs in which to allow execution (0-3, 0,1)'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l cpuset-mems -d 'string MEMs in which to allow execution (0-3, 0,1)'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l device -d 'list Add a host device to the container'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l device-cgroup-rule -d 'list Add a rule to the cgroup allowed devices list'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l device-read-bps -d 'list Limit read rate (bytes per second) from a device (default [])'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l device-read-iops -d 'list Limit read rate (IO per second) from a device (default [])'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l device-write-bps -d 'list Limit write rate (bytes per second) to a device (default [])'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l device-write-iops -d 'list Limit write rate (IO per second) to a device (default [])'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l disable-content-trust -d 'Skip image verification (default true)'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l dns -d 'list Set custom DNS servers'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l dns-option -d 'list Set DNS options'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l dns-search -d 'list Set custom DNS search domains'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l entrypoint -d 'string Overwrite the default ENTRYPOINT of the image'
complete -f -c docker -n "__fish_seen_subcommand_from create " -s e -l env -d 'Set environment variables'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l env-file -d 'list Read in a file of environment variables'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l expose -d 'list Expose a port or a range of ports'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l group-add -d 'list Add additional groups to join'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l health-cmd -d 'string Command to run to check health'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l health-interval -d 'duration Time between running the check (ms|s|m|h) (default 0s)'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l health-retries -d 'int Consecutive failures needed to report unhealthy'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l health-start-period -d 'duration Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l health-timeout -d 'duration Maximum time to allow one check to run (ms|s|m|h) (default 0s)'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l help -d 'Print usage'
complete -f -c docker -n "__fish_seen_subcommand_from create " -s h -l hostname -d 'Container host name'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l init -d 'Run an init inside the container that forwards signals and reaps processes'
complete -f -c docker -n "__fish_seen_subcommand_from create " -s i -l interactive -d 'Keep STDIN open even if not attached'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l io-maxbandwidth -d 'bytes Maximum IO bandwidth limit for the system drive (Windows only)'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l io-maxiops -d 'uint Maximum IOps limit for the system drive (Windows only)'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l ip -d 'string IPv4 address (e.g., 172.30.100.104)'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l ip6 -d 'string IPv6 address (e.g., 2001:db8::33)'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l ipc -d 'string IPC mode to use'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l isolation -d 'string Container isolation technology'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l kernel-memory -d 'bytes Kernel memory limit'
complete -f -c docker -n "__fish_seen_subcommand_from create " -s l -l label -d 'Set meta data on a container'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l label-file -d 'list Read in a line delimited file of labels'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l link -d 'list Add link to another container'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l link-local-ip -d 'list Container IPv4/IPv6 link-local addresses'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l log-driver -d 'string Logging driver for the container'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l log-opt -d 'list Log driver options'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l mac-address -d 'string Container MAC address (e.g., 92:d0:c6:0a:29:33)'
complete -f -c docker -n "__fish_seen_subcommand_from create " -s m -l memory -d 'bytes Memory limit'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l memory-reservation -d 'bytes Memory soft limit'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l memory-swap -d 'bytes Swap limit equal to memory plus swap: \'-1\' to enable unlimited swap'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l memory-swappiness -d 'int Tune container memory swappiness (0 to 100) (default -1)'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l mount -d 'mount Attach a filesystem mount to the container'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l name -d 'string Assign a name to the container'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l network -d 'string Connect a container to a network (default "default")'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l network-alias -d 'list Add network-scoped alias for the container'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l no-healthcheck -d 'Disable any container-specified HEALTHCHECK'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l oom-kill-disable -d 'Disable OOM Killer'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l oom-score-adj -d 'int Tune host\'s OOM preferences (-1000 to 1000)'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l pid -d 'string PID namespace to use'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l pids-limit -d 'int Tune container pids limit (set -1 for unlimited)'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l platform -d 'string Set platform if server is multi-platform capable'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l privileged -d 'Give extended privileges to this container'
complete -f -c docker -n "__fish_seen_subcommand_from create " -s p -l publish -d 'Publish a container\'s port(s) to the host'
complete -f -c docker -n "__fish_seen_subcommand_from create " -s P -l publish-all -d 'Publish all exposed ports to random ports'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l read-only -d 'Mount the container\'s root filesystem as read only'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l restart -d 'string Restart policy to apply when a container exits (default "no")'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l rm -d 'Automatically remove the container when it exits'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l runtime -d 'string Runtime to use for this container'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l security-opt -d 'list Security Options'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l shm-size -d 'bytes Size of /dev/shm'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l stop-signal -d 'string Signal to stop a container (default "SIGTERM")'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l stop-timeout -d 'int Timeout (in seconds) to stop a container'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l storage-opt -d 'list Storage driver options for the container'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l sysctl -d 'map Sysctl options (default map[])'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l tmpfs -d 'list Mount a tmpfs directory'
complete -f -c docker -n "__fish_seen_subcommand_from create " -s t -l tty -d 'Allocate a pseudo-TTY'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l ulimit -d 'ulimit Ulimit options (default [])'
complete -f -c docker -n "__fish_seen_subcommand_from create " -s u -l user -d 'Username or UID (format: <name|uid>[:<group|gid>])'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l userns -d 'string User namespace to use'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l uts -d 'string UTS namespace to use'
complete -f -c docker -n "__fish_seen_subcommand_from create " -s v -l volume -d 'Bind mount a volume'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l volume-driver -d 'string Optional volume driver for the container'
complete -f -c docker -n "__fish_seen_subcommand_from create " -l volumes-from -d 'list Mount volumes from the specified container(s)'
complete -f -c docker -n "__fish_seen_subcommand_from create " -s w -l workdir -d 'Working directory inside the container'
complete -f -c docker -n "__fish_seen_subcommand_from deploy " -l bundle-file -d 'string Path to a Distributed Application Bundle file'
complete -f -c docker -n "__fish_seen_subcommand_from deploy " -s c -l compose-file -d 'strings Path to a Compose file'
complete -f -c docker -n "__fish_seen_subcommand_from deploy " -l prune -d 'Prune services that are no longer referenced'
complete -f -c docker -n "__fish_seen_subcommand_from deploy " -l resolve-image -d 'string Query the registry to resolve image digest and supported platforms ("always"|"changed"|"never") (default "always")'
complete -f -c docker -n "__fish_seen_subcommand_from deploy " -l with-registry-auth -d 'Send registry authentication details to Swarm agents'
complete -f -c docker -n "__fish_seen_subcommand_from events " -s f -l filter -d 'filter Filter output based on conditions provided'
complete -f -c docker -n "__fish_seen_subcommand_from events " -l format -d 'string Format the output using the given Go template'
complete -f -c docker -n "__fish_seen_subcommand_from events " -l since -d 'string Show all events created since timestamp'
complete -f -c docker -n "__fish_seen_subcommand_from events " -l until -d 'string Stream events until this timestamp'
complete -f -c docker -n "__fish_seen_subcommand_from exec " -s d -l detach -d 'Detached mode: run command in the background'
complete -f -c docker -n "__fish_seen_subcommand_from exec " -l detach-keys -d 'string Override the key sequence for detaching a container'
complete -f -c docker -n "__fish_seen_subcommand_from exec " -s e -l env -d 'Set environment variables'
complete -f -c docker -n "__fish_seen_subcommand_from exec " -s i -l interactive -d 'Keep STDIN open even if not attached'
complete -f -c docker -n "__fish_seen_subcommand_from exec " -l privileged -d 'Give extended privileges to the command'
complete -f -c docker -n "__fish_seen_subcommand_from exec " -s t -l tty -d 'Allocate a pseudo-TTY'
complete -f -c docker -n "__fish_seen_subcommand_from exec " -s u -l user -d 'Username or UID (format: <name|uid>[:<group|gid>])'
complete -f -c docker -n "__fish_seen_subcommand_from exec " -s w -l workdir -d 'Working directory inside the container'
complete -f -c docker -n "__fish_seen_subcommand_from export " -s o -l output -d 'Write to a file, instead of STDOUT'
complete -f -c docker -n "__fish_seen_subcommand_from history " -l format -d 'string Pretty-print images using a Go template'
complete -f -c docker -n "__fish_seen_subcommand_from history " -s H -l human -d 'Print sizes and dates in human readable format (default true)'
complete -f -c docker -n "__fish_seen_subcommand_from history " -l no-trunc -d 'Don\'t truncate output'
complete -f -c docker -n "__fish_seen_subcommand_from history " -s q -l quiet -d 'Only show numeric IDs'
complete -f -c docker -n "__fish_seen_subcommand_from images " -s a -l all -d 'Show all images (default hides intermediate images)'
complete -f -c docker -n "__fish_seen_subcommand_from images " -l digests -d 'Show digests'
complete -f -c docker -n "__fish_seen_subcommand_from images " -s f -l filter -d 'filter Filter output based on conditions provided'
complete -f -c docker -n "__fish_seen_subcommand_from images " -l format -d 'string Pretty-print images using a Go template'
complete -f -c docker -n "__fish_seen_subcommand_from images " -l no-trunc -d 'Don\'t truncate output'
complete -f -c docker -n "__fish_seen_subcommand_from images " -s q -l quiet -d 'Only show numeric IDs'
complete -f -c docker -n "__fish_seen_subcommand_from import " -s c -l change -d 'Apply Dockerfile instruction to the created image'
complete -f -c docker -n "__fish_seen_subcommand_from import " -s m -l message -d 'Set commit message for imported image'
complete -f -c docker -n "__fish_seen_subcommand_from info " -s f -l format -d 'Format the output using the given Go template'
complete -f -c docker -n "__fish_seen_subcommand_from inspect " -s f -l format -d 'Format the output using the given Go template'
complete -f -c docker -n "__fish_seen_subcommand_from inspect " -s s -l size -d 'Display total file sizes if the type is container'
complete -f -c docker -n "__fish_seen_subcommand_from inspect " -l type -d 'string Return JSON for specified type'
complete -f -c docker -n "__fish_seen_subcommand_from kill " -s s -l signal -d 'Signal to send to the container (default "KILL")'
complete -f -c docker -n "__fish_seen_subcommand_from load " -s i -l input -d 'Read from tar archive file, instead of STDIN'
complete -f -c docker -n "__fish_seen_subcommand_from load " -s q -l quiet -d 'Suppress the load output'
complete -f -c docker -n "__fish_seen_subcommand_from login " -s p -l password -d 'Password'
complete -f -c docker -n "__fish_seen_subcommand_from login " -l password-stdin -d 'Take the password from stdin'
complete -f -c docker -n "__fish_seen_subcommand_from login " -s u -l username -d 'Username'
complete -f -c docker -n "__fish_seen_subcommand_from logs " -l details -d 'Show extra details provided to logs'
complete -f -c docker -n "__fish_seen_subcommand_from logs " -s f -l follow -d 'Follow log output'
complete -f -c docker -n "__fish_seen_subcommand_from logs " -l since -d 'string Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)'
complete -f -c docker -n "__fish_seen_subcommand_from logs " -l tail -d 'string Number of lines to show from the end of the logs (default "all")'
complete -f -c docker -n "__fish_seen_subcommand_from logs " -s t -l timestamps -d 'Show timestamps'
complete -f -c docker -n "__fish_seen_subcommand_from logs " -l until -d 'string Show logs before a timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)'
complete -f -c docker -n "__fish_seen_subcommand_from ps " -s a -l all -d 'Show all containers (default shows just running)'
complete -f -c docker -n "__fish_seen_subcommand_from ps " -s f -l filter -d 'filter Filter output based on conditions provided'
complete -f -c docker -n "__fish_seen_subcommand_from ps " -l format -d 'string Pretty-print containers using a Go template'
complete -f -c docker -n "__fish_seen_subcommand_from ps " -s n -l last -d 'int Show n last created containers (includes all states) (default -1)'
complete -f -c docker -n "__fish_seen_subcommand_from ps " -s l -l latest -d 'Show the latest created container (includes all states)'
complete -f -c docker -n "__fish_seen_subcommand_from ps " -l no-trunc -d 'Don\'t truncate output'
complete -f -c docker -n "__fish_seen_subcommand_from ps " -s q -l quiet -d 'Only display numeric IDs'
complete -f -c docker -n "__fish_seen_subcommand_from ps " -s s -l size -d 'Display total file sizes'
complete -f -c docker -n "__fish_seen_subcommand_from pull " -s a -l all-tags -d 'Download all tagged images in the repository'
complete -f -c docker -n "__fish_seen_subcommand_from pull " -l disable-content-trust -d 'Skip image verification (default true)'
complete -f -c docker -n "__fish_seen_subcommand_from pull " -l platform -d 'string Set platform if server is multi-platform capable'
complete -f -c docker -n "__fish_seen_subcommand_from push " -l disable-content-trust -d 'Skip image signing (default true)'
complete -f -c docker -n "__fish_seen_subcommand_from restart " -s t -l time -d 'int Seconds to wait for stop before killing the container (default 10)'
complete -f -c docker -n "__fish_seen_subcommand_from rm " -s f -l force -d 'Force the removal of a running container (uses SIGKILL)'
complete -f -c docker -n "__fish_seen_subcommand_from rm " -s l -l link -d 'Remove the specified link'
complete -f -c docker -n "__fish_seen_subcommand_from rm " -s v -l volumes -d 'Remove the volumes associated with the container'
complete -f -c docker -n "__fish_seen_subcommand_from rmi " -s f -l force -d 'Force removal of the image'
complete -f -c docker -n "__fish_seen_subcommand_from rmi " -l no-prune -d 'Do not delete untagged parents'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l add-host -d 'list Add a custom host-to-IP mapping (host:ip)'
complete -f -c docker -n "__fish_seen_subcommand_from run " -s a -l attach -d 'Attach to STDIN, STDOUT or STDERR'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l blkio-weight -d 'uint16 Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l blkio-weight-device -d 'list Block IO weight (relative device weight) (default [])'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l cap-add -d 'list Add Linux capabilities'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l cap-drop -d 'list Drop Linux capabilities'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l cgroup-parent -d 'string Optional parent cgroup for the container'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l cidfile -d 'string Write the container ID to the file'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l cpu-count -d 'int CPU count (Windows only)'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l cpu-percent -d 'int CPU percent (Windows only)'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l cpu-period -d 'int Limit CPU CFS (Completely Fair Scheduler) period'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l cpu-quota -d 'int Limit CPU CFS (Completely Fair Scheduler) quota'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l cpu-rt-period -d 'int Limit CPU real-time period in microseconds'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l cpu-rt-runtime -d 'int Limit CPU real-time runtime in microseconds'
complete -f -c docker -n "__fish_seen_subcommand_from run " -s c -l cpu-shares -d 'int CPU shares (relative weight)'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l cpus -d 'decimal Number of CPUs'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l cpuset-cpus -d 'string CPUs in which to allow execution (0-3, 0,1)'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l cpuset-mems -d 'string MEMs in which to allow execution (0-3, 0,1)'
complete -f -c docker -n "__fish_seen_subcommand_from run " -s d -l detach -d 'Run container in background and print container ID'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l detach-keys -d 'string Override the key sequence for detaching a container'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l device -d 'list Add a host device to the container'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l device-cgroup-rule -d 'list Add a rule to the cgroup allowed devices list'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l device-read-bps -d 'list Limit read rate (bytes per second) from a device (default [])'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l device-read-iops -d 'list Limit read rate (IO per second) from a device (default [])'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l device-write-bps -d 'list Limit write rate (bytes per second) to a device (default [])'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l device-write-iops -d 'list Limit write rate (IO per second) to a device (default [])'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l disable-content-trust -d 'Skip image verification (default true)'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l dns -d 'list Set custom DNS servers'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l dns-option -d 'list Set DNS options'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l dns-search -d 'list Set custom DNS search domains'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l entrypoint -d 'string Overwrite the default ENTRYPOINT of the image'
complete -f -c docker -n "__fish_seen_subcommand_from run " -s e -l env -d 'Set environment variables'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l env-file -d 'list Read in a file of environment variables'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l expose -d 'list Expose a port or a range of ports'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l group-add -d 'list Add additional groups to join'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l health-cmd -d 'string Command to run to check health'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l health-interval -d 'duration Time between running the check (ms|s|m|h) (default 0s)'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l health-retries -d 'int Consecutive failures needed to report unhealthy'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l health-start-period -d 'duration Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l health-timeout -d 'duration Maximum time to allow one check to run (ms|s|m|h) (default 0s)'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l help -d 'Print usage'
complete -f -c docker -n "__fish_seen_subcommand_from run " -s h -l hostname -d 'Container host name'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l init -d 'Run an init inside the container that forwards signals and reaps processes'
complete -f -c docker -n "__fish_seen_subcommand_from run " -s i -l interactive -d 'Keep STDIN open even if not attached'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l io-maxbandwidth -d 'bytes Maximum IO bandwidth limit for the system drive (Windows only)'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l io-maxiops -d 'uint Maximum IOps limit for the system drive (Windows only)'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l ip -d 'string IPv4 address (e.g., 172.30.100.104)'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l ip6 -d 'string IPv6 address (e.g., 2001:db8::33)'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l ipc -d 'string IPC mode to use'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l isolation -d 'string Container isolation technology'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l kernel-memory -d 'bytes Kernel memory limit'
complete -f -c docker -n "__fish_seen_subcommand_from run " -s l -l label -d 'Set meta data on a container'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l label-file -d 'list Read in a line delimited file of labels'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l link -d 'list Add link to another container'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l link-local-ip -d 'list Container IPv4/IPv6 link-local addresses'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l log-driver -d 'string Logging driver for the container'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l log-opt -d 'list Log driver options'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l mac-address -d 'string Container MAC address (e.g., 92:d0:c6:0a:29:33)'
complete -f -c docker -n "__fish_seen_subcommand_from run " -s m -l memory -d 'bytes Memory limit'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l memory-reservation -d 'bytes Memory soft limit'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l memory-swap -d 'bytes Swap limit equal to memory plus swap: \'-1\' to enable unlimited swap'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l memory-swappiness -d 'int Tune container memory swappiness (0 to 100) (default -1)'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l mount -d 'mount Attach a filesystem mount to the container'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l name -d 'string Assign a name to the container'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l network -d 'string Connect a container to a network (default "default")'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l network-alias -d 'list Add network-scoped alias for the container'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l no-healthcheck -d 'Disable any container-specified HEALTHCHECK'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l oom-kill-disable -d 'Disable OOM Killer'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l oom-score-adj -d 'int Tune host\'s OOM preferences (-1000 to 1000)'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l pid -d 'string PID namespace to use'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l pids-limit -d 'int Tune container pids limit (set -1 for unlimited)'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l platform -d 'string Set platform if server is multi-platform capable'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l privileged -d 'Give extended privileges to this container'
complete -f -c docker -n "__fish_seen_subcommand_from run " -s p -l publish -d 'Publish a container\'s port(s) to the host'
complete -f -c docker -n "__fish_seen_subcommand_from run " -s P -l publish-all -d 'Publish all exposed ports to random ports'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l read-only -d 'Mount the container\'s root filesystem as read only'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l restart -d 'string Restart policy to apply when a container exits (default "no")'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l rm -d 'Automatically remove the container when it exits'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l runtime -d 'string Runtime to use for this container'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l security-opt -d 'list Security Options'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l shm-size -d 'bytes Size of /dev/shm'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l sig-proxy -d 'Proxy received signals to the process (default true)'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l stop-signal -d 'string Signal to stop a container (default "SIGTERM")'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l stop-timeout -d 'int Timeout (in seconds) to stop a container'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l storage-opt -d 'list Storage driver options for the container'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l sysctl -d 'map Sysctl options (default map[])'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l tmpfs -d 'list Mount a tmpfs directory'
complete -f -c docker -n "__fish_seen_subcommand_from run " -s t -l tty -d 'Allocate a pseudo-TTY'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l ulimit -d 'ulimit Ulimit options (default [])'
complete -f -c docker -n "__fish_seen_subcommand_from run " -s u -l user -d 'Username or UID (format: <name|uid>[:<group|gid>])'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l userns -d 'string User namespace to use'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l uts -d 'string UTS namespace to use'
complete -f -c docker -n "__fish_seen_subcommand_from run " -s v -l volume -d 'Bind mount a volume'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l volume-driver -d 'string Optional volume driver for the container'
complete -f -c docker -n "__fish_seen_subcommand_from run " -l volumes-from -d 'list Mount volumes from the specified container(s)'
complete -f -c docker -n "__fish_seen_subcommand_from run " -s w -l workdir -d 'Working directory inside the container'
complete -f -c docker -n "__fish_seen_subcommand_from save " -s o -l output -d 'Write to a file, instead of STDOUT'
complete -f -c docker -n "__fish_seen_subcommand_from search " -s f -l filter -d 'filter Filter output based on conditions provided'
complete -f -c docker -n "__fish_seen_subcommand_from search " -l format -d 'string Pretty-print search using a Go template'
complete -f -c docker -n "__fish_seen_subcommand_from search " -l limit -d 'int Max number of search results (default 25)'
complete -f -c docker -n "__fish_seen_subcommand_from search " -l no-trunc -d 'Don\'t truncate output'
complete -f -c docker -n "__fish_seen_subcommand_from start " -s a -l attach -d 'Attach STDOUT/STDERR and forward signals'
complete -f -c docker -n "__fish_seen_subcommand_from start " -l checkpoint -d 'string Restore from this checkpoint'
complete -f -c docker -n "__fish_seen_subcommand_from start " -l checkpoint-dir -d 'string Use a custom checkpoint storage directory'
complete -f -c docker -n "__fish_seen_subcommand_from start " -l detach-keys -d 'string Override the key sequence for detaching a container'
complete -f -c docker -n "__fish_seen_subcommand_from start " -s i -l interactive -d 'Attach container\'s STDIN'
complete -f -c docker -n "__fish_seen_subcommand_from stats " -s a -l all -d 'Show all containers (default shows just running)'
complete -f -c docker -n "__fish_seen_subcommand_from stats " -l format -d 'string Pretty-print images using a Go template'
complete -f -c docker -n "__fish_seen_subcommand_from stats " -l no-stream -d 'Disable streaming stats and only pull the first result'
complete -f -c docker -n "__fish_seen_subcommand_from stats " -l no-trunc -d 'Do not truncate output'
complete -f -c docker -n "__fish_seen_subcommand_from stop " -s t -l time -d 'int Seconds to wait for stop before killing it (default 10)'
complete -f -c docker -n "__fish_seen_subcommand_from update " -l blkio-weight -d 'uint16 Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)'
complete -f -c docker -n "__fish_seen_subcommand_from update " -l cpu-period -d 'int Limit CPU CFS (Completely Fair Scheduler) period'
complete -f -c docker -n "__fish_seen_subcommand_from update " -l cpu-quota -d 'int Limit CPU CFS (Completely Fair Scheduler) quota'
complete -f -c docker -n "__fish_seen_subcommand_from update " -l cpu-rt-period -d 'int Limit the CPU real-time period in microseconds'
complete -f -c docker -n "__fish_seen_subcommand_from update " -l cpu-rt-runtime -d 'int Limit the CPU real-time runtime in microseconds'
complete -f -c docker -n "__fish_seen_subcommand_from update " -s c -l cpu-shares -d 'int CPU shares (relative weight)'
complete -f -c docker -n "__fish_seen_subcommand_from update " -l cpus -d 'decimal Number of CPUs'
complete -f -c docker -n "__fish_seen_subcommand_from update " -l cpuset-cpus -d 'string CPUs in which to allow execution (0-3, 0,1)'
complete -f -c docker -n "__fish_seen_subcommand_from update " -l cpuset-mems -d 'string MEMs in which to allow execution (0-3, 0,1)'
complete -f -c docker -n "__fish_seen_subcommand_from update " -l kernel-memory -d 'bytes Kernel memory limit'
complete -f -c docker -n "__fish_seen_subcommand_from update " -s m -l memory -d 'bytes Memory limit'
complete -f -c docker -n "__fish_seen_subcommand_from update " -l memory-reservation -d 'bytes Memory soft limit'
complete -f -c docker -n "__fish_seen_subcommand_from update " -l memory-swap -d 'bytes Swap limit equal to memory plus swap: \'-1\' to enable unlimited swap'
complete -f -c docker -n "__fish_seen_subcommand_from update " -l restart -d 'string Restart policy to apply when a container exits'
complete -f -c docker -n "__fish_seen_subcommand_from version " -s f -l format -d 'Format the output using the given Go template'
set -l stack_subcommand deploy ls ps rm services
complete -f -c docker -n "__fish_seen_subcommand_from stack ;and not __fish_seen_subcommand_from $stack_subcommand" -a deploy -d 'Deploy a new stack or update an existing stack'
complete -f -c docker -n "__fish_seen_subcommand_from stack ;and not __fish_seen_subcommand_from $stack_subcommand" -a ls -d 'List stacks'
complete -f -c docker -n "__fish_seen_subcommand_from stack ;and not __fish_seen_subcommand_from $stack_subcommand" -a ps -d 'List the tasks in the stack'
complete -f -c docker -n "__fish_seen_subcommand_from stack ;and not __fish_seen_subcommand_from $stack_subcommand" -a rm -d 'Remove one or more stacks'
complete -f -c docker -n "__fish_seen_subcommand_from stack ;and not __fish_seen_subcommand_from $stack_subcommand" -a services -d 'List the services in the stack'
complete -f -c docker -n "__fish_seen_subcommand_from stack ;and __fish_seen_subcommand_from deploy " -l bundle-file -d 'string Path to a Distributed Application Bundle file'
complete -f -c docker -n "__fish_seen_subcommand_from stack ;and __fish_seen_subcommand_from deploy " -s c -l compose-file -d 'strings Path to a Compose file'
complete -f -c docker -n "__fish_seen_subcommand_from stack ;and __fish_seen_subcommand_from deploy " -l prune -d 'Prune services that are no longer referenced'
complete -f -c docker -n "__fish_seen_subcommand_from stack ;and __fish_seen_subcommand_from deploy " -l resolve-image -d 'string Query the registry to resolve image digest and supported platforms ("always"|"changed"|"never") (default "always")'
complete -f -c docker -n "__fish_seen_subcommand_from stack ;and __fish_seen_subcommand_from deploy " -l with-registry-auth -d 'Send registry authentication details to Swarm agents'
complete -f -c docker -n "__fish_seen_subcommand_from stack ;and __fish_seen_subcommand_from ls " -l format -d 'string Pretty-print stacks using a Go template'
complete -f -c docker -n "__fish_seen_subcommand_from stack ;and __fish_seen_subcommand_from ps " -s f -l filter -d 'filter Filter output based on conditions provided'
complete -f -c docker -n "__fish_seen_subcommand_from stack ;and __fish_seen_subcommand_from ps " -l format -d 'string Pretty-print tasks using a Go template'
complete -f -c docker -n "__fish_seen_subcommand_from stack ;and __fish_seen_subcommand_from ps " -l no-resolve -d 'Do not map IDs to Names'
complete -f -c docker -n "__fish_seen_subcommand_from stack ;and __fish_seen_subcommand_from ps " -l no-trunc -d 'Do not truncate output'
complete -f -c docker -n "__fish_seen_subcommand_from stack ;and __fish_seen_subcommand_from ps " -s q -l quiet -d 'Only display task IDs'
complete -f -c docker -n "__fish_seen_subcommand_from stack ;and __fish_seen_subcommand_from services " -s f -l filter -d 'filter Filter output based on conditions provided'
complete -f -c docker -n "__fish_seen_subcommand_from stack ;and __fish_seen_subcommand_from services " -l format -d 'string Pretty-print services using a Go template'
complete -f -c docker -n "__fish_seen_subcommand_from stack ;and __fish_seen_subcommand_from services " -s q -l quiet -d 'Only display IDs'

# Pure Go implementation of jq
# https://github.com/itchyny/gojq

complete -c gojq -s c -l compact-output -d "compact output, no pretty-print"
complete -c gojq -s r -l raw-output -d "output raw strings without quotes"
complete -c gojq -s j -l join-output -d "stop printing a newline after each output"
complete -c gojq -s 0 -l nul-output -d "print NUL after each output"
complete -c gojq -s C -l color-output -d "colorize output even if piped"
complete -c gojq -s M -l monochrome-output -d "stop colorizing output"
complete -c gojq -l yaml-output -d "output as YAML"
complete -c gojq -l indent -x -d "number of spaces for indentation"
complete -c gojq -l tab -d "use tabs for indentation"
complete -c gojq -s n -l null-input -d "use null as input value"
complete -c gojq -s R -l raw-input -d "read input as raw strings"
complete -c gojq -s s -l slurp -d "read all inputs into an array"
complete -c gojq -l stream -d "parse input in stream fashion"
complete -c gojq -l yaml-input -d "read input as YAML"
complete -c gojq -s f -l from-file -rF -d "load query from file"
complete -c gojq -s L -xa "(__fish_complete_directories)" -d "directory to search modules from"
complete -c gojq -l arg -x -d "set variable to string value"
complete -c gojq -l argjson -x -d "set variable to JSON value"
complete -c gojq -l slurpfile -x -d "set variable to the JSON contents of the file"
complete -c gojq -l rawfile -x -d "set variable to the contents of the file"
complete -c gojq -l args -d "consume remaining arguments as positional string values"
complete -c gojq -l jsonargs -d "consume remaining arguments as positional JSON values"
complete -c gojq -s e -l exit-status -d "exit 1 when the last value is false or null"
complete -c gojq -s v -l version -d "print version"
complete -c gojq -s h -l help -d "print help"
